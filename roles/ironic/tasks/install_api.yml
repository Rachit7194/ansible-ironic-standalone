---
- name: RedHat - Install Ironic-API required packages
  yum:
    name: "{{ item.key if ('version' not in item.value) else ('%s-%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    update_cache: "{{ ironic_packages_update_cache | ternary('yes', 'no') }}"
  with_dict: "{{ ironic_api_packages }}"
  when: ansible_os_family == 'RedHat'
  register: __ironic_api_installed_rh
  tags: ["redhat", "packages"]

- name: Debian - Install Ironic-API required packages
  apt: 
    name: "{{ item.key if ('version' not in item.value) else ('%s=%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    install_recommends: "{{ ironic_packages_install_recommends }}"
    update_cache: "{{ ironic_packages_update_cache | ternary('yes', 'no') }}"
    cache_valid_time: "{{ ironic_packages_update_cache }}"
  with_dict: "{{ ironic_api_packages }}"
  when: ansible_os_family == 'Debian'
  register: __ironic_api_installed_debian
  tags: ["debian", "packages"]

- name: Check if Ironic-API packages were installed
  set_fact: _ironic_api_reinstalled="{{ __ironic_api_installed_rh.changed or __ironic_api_installed_debian.changed }}" 

# Because Ubuntu starts ironic daemons as part of the install process, 
# we need to stop it
- name: Stop Ironic-API daemon after initial install
  service: name="{{ ironic_api_service_name }}" state=stopped enabled=no
  ignore_errors: yes
  when: _ironic_api_reinstalled


- block:
  - name: Create custom systemd folder configuration
    file: 
      path: "/etc/systemd/system/{{ ironic_api_service_name }}.service.d"
      state: directory
      mode: 0755

  - name: Define custom systemd properties
    template:
      src: systemd-api.conf.j2
      dest: "/etc/systemd/system/{{ ironic_api_service_name }}.service.d/service.conf"
      mode: 0644
    register: __ironic_api_systemd

  - name: Delete upstart configuration
    file: path="/etc/init/{{ ironic_api_service_name }}.conf" state=absent

  - name: Reload systemd
    command: systemctl daemon-reload
    when: __ironic_api_systemd|changed
  
  when: ironic_init_system == 'systemd'
  tags: ["systemd", "init"]

