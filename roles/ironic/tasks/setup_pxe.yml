---
- name: Create PXE root folders
  file:
    path: "{{ item }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0755
    state: directory
  with_items:
    - "{{ ironic_pxe_tftp_root }}"
    - "{{ ironic_pxe_tftp_master_path }}"
  when: >
    ironic_pxe_tftp_root is defined and 
    not ironic_pxe_tftp_root is none
  tags: ["ironic", "configure", "pxe"]

- name: Create HTTP root folder for iPXE if enabled
  file:
    path: "{{ ironic_pxe_http_root }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0755
    state: directory
  when: >
    ironic_pxe_http_root is defined and 
    not ironic_pxe_http_root is none and
    ironic_pxe_http_url is defined and
    not ironic_pxe_http_url is none
  tags: ["ironic", "configure", "pxe"]

- name: Copy isolinux config template if defined
  copy:
    src: "{{ ironic_isolinux_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_isolinux_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_isolinux_config_template is defined and
    not ironic_isolinux_config_template is none
  register: __ironic_isolinux_template
  tags: ["ironic", "configure", "pxe"]

- name: Copy grub config template if defined
  copy:
    src: "{{ ironic_grub_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_grub_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_grub_config_template is defined and
    not ironic_grub_config_template is none
  register: __ironic_grub_template
  tags: ["ironic", "configure", "pxe"]

- name: Copy agent PXE config template if defined
  copy:
    src: "{{ ironic_agent_pxe_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_agent_pxe_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_agent_pxe_config_template is defined and
    not ironic_agent_pxe_config_template is none
  register: __ironic_agent_pxe_template
  tags: ["ironic", "configure", "pxe"]

- name: Copy PXE config template if defined
  copy:
    src: "{{ ironic_pxe_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_pxe_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_pxe_config_template is defined and
    not ironic_pxe_config_template is none
  register: __ironic_pxe_template
  tags: ["ironic", "configure", "pxe"]

- name: Copy PXE UEFI config template if defined
  copy:
    src: "{{ ironic_pxe_uefi_pxe_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_pxe_uefi_pxe_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_pxe_uefi_pxe_config_template is defined and
    not ironic_pxe_uefi_pxe_config_template is none
  register: __ironic_pxe_uefi_template
  tags: ["ironic", "configure", "pxe"]

- name: Copy iPXE config template if defined
  copy:
    src: "{{ ironic_pxe_ipxe_boot_script }}"
    dest: "{{ ironic_state_path }}/{{ ironic_pxe_ipxe_boot_script | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_pxe_ipxe_boot_script is defined and
    not ironic_pxe_ipxe_boot_script is none
  register: __ironic_ipxe_template
  tags: ["ironic", "configure", "pxe"]

- name: Generate map-file for DHCP daemon
  template:
    src: map-file.j2
    dest: "{{ ironic_pxe_tftp_root }}/map-file"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_pxe_tftp_root is defined and
    not ironic_pxe_tftp_root is none
  tags: ["ironic", "configure", "pxe"]

- name: Copy PXE boot files for TFTP
  command: cp "{{ item }}" "{{ ironic_pxe_tftp_root }}"
  when: >
    ironic_pxe_tftp_root is defined and
    not ironic_pxe_tftp_root is none and
    ironic_pxe_bootfile_name == 'pxelinux.0'
  with_items:
    - /usr/lib/syslinux/pxelinux.0
    - /usr/lib/syslinux/chain.c32
#   - /usr/lib/syslinux/modules/*/ldlinux.*
  ignore_errors: yes
  tags: ["ironic", "configure", "pxe"]

- name: Check if elilo is needed for UEFI
  stat: path="{{ ironic_pxe_tftp_root }}/{{ ironic_pxe_uefi_pxe_bootfile_name }}"
  when: >
    ironic_pxe_tftp_root is defined and
    not ironic_pxe_tftp_root is none and
    ironic_pxe_uefi_pxe_bootfile_name is defined and
    ironic_pxe_uefi_pxe_bootfile_name == "elilo.efi"
  register: __ironic_uefi_elilo
  tags: ["ironic", "configure", "pxe", "elilo"]

- name: Get elilo tarball if UEFI is enabled
  get_url:
    url: "{{ ironic_elilo_url }}"
    dest: "/tmp/elilo.tar.gz"
  when: >
    ironic_pxe_tftp_root is defined and
    not ironic_pxe_tftp_root is none and
    ironic_pxe_uefi_pxe_bootfile_name is defined and
    ironic_pxe_uefi_pxe_bootfile_name == "elilo.efi" and
    not __ironic_uefi_elilo.stat.exists
  tags: ["ironic", "configure", "pxe", "elilo"]

- name: Unarchive elilo tarball
  unarchive:
    src: "/tmp/elilo.tar.gz"
    dest: "/tmp/"
    copy: no
  when: >
    ironic_pxe_tftp_root is defined and
    not ironic_pxe_tftp_root is none and
    ironic_pxe_uefi_pxe_bootfile_name is defined and
    ironic_pxe_uefi_pxe_bootfile_name == "elilo.efi" and
    not __ironic_uefi_elilo.stat.exists
  tags: ["ironic", "configure", "pxe", "elilo"]

- name: Install elilo in tftpboot
  shell: cp /tmp/elilo-*.*-x86_64.efi "{{ ironic_pxe_tftp_root }}/elilo.efi"
  when: >
    ironic_pxe_tftp_root is defined and
    not ironic_pxe_tftp_root is none and
    ironic_pxe_uefi_pxe_bootfile_name is defined and
    ironic_pxe_uefi_pxe_bootfile_name == "elilo.efi" and
    not __ironic_uefi_elilo.stat.exists
  tags: ["ironic", "configure", "pxe", "elilo"]

- name: Check files permissions on PXE root folder
  file:
    path: "{{ ironic_pxe_tftp_root }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0775
    state: directory
    recurse: yes
  when: >
    ironic_pxe_tftp_root is defined and 
    not ironic_pxe_tftp_root is none
  tags: ["ironic", "configure", "pxe"]

- name: Reload Ironic daemons
  service: name={{ item }} state=reloaded
  with_items:
    - "{{ ironic_conductor_service_name }}"
    - "{{ ironic_api_service_name }}"
  when: >
    __ironic_isolinux_template | changed or
    __ironic_grub_template | changed or
    __ironic_agent_pxe_template | changed or
    __ironic_pxe_template | changed or
    __ironic_pxe_uefi_template | changed or
    __ironic_ipxe_template | changed
  tags: ["ironic", "configure", "pxe"]

