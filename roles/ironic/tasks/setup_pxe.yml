---
# As deploy images are managed external service (e.g. nginx), 
# there is no need to setup the ownership
- name: Create deploy file images folder
  file:
    path: "{{ item }}"
    group: "{{ ironic_group }}"
    mode: 0775
    state: directory
  with_items:
    - "{{ ironic_pxe_images_path }}"
    - "{{ ironic_pxe_instance_master_path }}"

# As PXE is managed by external service, there is no
# need to setup the ownership  
- name: Create PXE root folders
  file:
    path: "{{ item }}"
    group: "{{ ironic_group }}"
    mode: 0775
    state: directory
  with_items:
    - "{{ ironic_pxe_tftp_root }}"
    - "{{ ironic_pxe_tftp_master_path }}"
  when: >
    ironic_pxe_tftp_root is defined and 
    not ironic_pxe_tftp_root is none

# As deploy images are managed external service (e.g. nginx), 
# there is no need to setup the ownership
- name: Create HTTP root deploy folder
  file:
    path: "{{ ironic_deploy_http_root }}"
    group: "{{ ironic_group }}"
    mode: 0775
    state: directory
  when: >
    ironic_deploy_http_root is defined and 
    not ironic_deploy_http_root is none and
    ironic_deploy_http_url is defined and
    not ironic_deploy_http_url is none

- name: Copy isolinux config template if defined
  copy:
    src: "{{ ironic_isolinux_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_isolinux_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_isolinux_config_template is defined and
    not ironic_isolinux_config_template is none
  register: __ironic_isolinux_template

- name: Copy grub config template if defined
  copy:
    src: "{{ ironic_grub_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_grub_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_grub_config_template is defined and
    not ironic_grub_config_template is none
  register: __ironic_grub_template

- name: Copy agent PXE config template if defined
  copy:
    src: "{{ ironic_agent_pxe_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_agent_pxe_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_agent_pxe_config_template is defined and
    not ironic_agent_pxe_config_template is none
  register: __ironic_agent_pxe_template

- name: Copy PXE config template if defined
  copy:
    src: "{{ ironic_pxe_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_pxe_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_pxe_config_template is defined and
    not ironic_pxe_config_template is none
  register: __ironic_pxe_template

- name: Copy PXE UEFI config template if defined
  copy:
    src: "{{ ironic_pxe_uefi_pxe_config_template }}"
    dest: "{{ ironic_state_path }}/{{ ironic_pxe_uefi_pxe_config_template | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_pxe_uefi_pxe_config_template is defined and
    not ironic_pxe_uefi_pxe_config_template is none
  register: __ironic_pxe_uefi_template

- name: Copy iPXE config template if defined
  copy:
    src: "{{ ironic_pxe_ipxe_boot_script }}"
    dest: "{{ ironic_state_path }}/{{ ironic_pxe_ipxe_boot_script | basename }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_pxe_ipxe_boot_script is defined and
    not ironic_pxe_ipxe_boot_script is none
  register: __ironic_ipxe_template

# Get pxelinux from syslinux
# http://www.syslinux.org/wiki/index.php?title=Library_modules#All_Syslinux_variants_need_an_additional_ldlinux_module
- name: Copy syslinux binaries to PXE folder
  shell: cp -v "{{ item }}" "{{ ironic_pxe_tftp_root }}" && chgrp "{{ ironic_group }}" "{{ ironic_pxe_tftp_root }}/{{ item | basename }}" && chmod 0664  "{{ ironic_pxe_tftp_root }}/{{ item | basename }}"
  with_items:
    - bios/core/pxelinux.0
    - bios/memdisk/memdisk
    - bios/com32/elflink/ldlinux/ldlinux.c32
    - bios/com32/libutil/libutil.c32
    - bios/com32/lib/libcom32.c32
    - bios/com32/chain/chain.c32
  when: >
    _ironic_syslinux_change and
    ironic_pxe_tftp_root is defined and
    not ironic_pxe_tftp_root is none and
    ironic_pxe_bootfile_name == 'pxelinux.0'
  args:
    chdir: "{{ ironic_syslinux_basedir }}/syslinux-{{ ironic_pxe_syslinux_version }}"
  tags: ["pxelinux"]


# Get elilo for UEFI
- block:
  - name: Downloading elilo tarball from url
    get_url:
      checksum: "{{ ironic_pxe_elilo_tarball_checksum }}"
      url: "{{ ironic_pxe_elilo_tarball_url }}"
      dest: "{{ ironic_syslinux_basedir }}/elilo-{{ ironic_pxe_elilo_version }}.tgz"
    register: __ironic_pxe_elilo_tarball

  - name: Create elilo tarball folder
    file:
      path: "{{ ironic_syslinux_basedir }}/elilo-{{ ironic_pxe_elilo_version }}"
      owner: "{{ ironic_user }}"
      group: "{{ ironic_group }}"
      mode: 0775
      state: directory
    when: __ironic_pxe_elilo_tarball | changed

  - name: Unarchive elilo tarball
    unarchive:
      src: "{{ ironic_syslinux_basedir }}/elilo-{{ ironic_pxe_elilo_version }}.tgz"
      dest: "{{ ironic_syslinux_basedir }}/elilo-{{ ironic_pxe_elilo_version }}"
      owner: "{{ ironic_user }}"
      group: "{{ ironic_group }}"
      copy: no
    when: __ironic_pxe_elilo_tarball | changed

  - name: Copy elilo binaries to PXE folder
    shell: cp -v elilo-*.*-x86_64.efi  "{{ ironic_pxe_tftp_root }}/elilo.efi" && chown "{{ ironic_user }}:{{ ironic_group }}" "{{ ironic_pxe_tftp_root }}/elilo.efi"
    args:
      chdir: "{{ ironic_syslinux_basedir }}/elilo-{{ ironic_pxe_elilo_version }}"
    when: __ironic_pxe_elilo_tarball | changed

  when: >
    ironic_pxe_tftp_root is defined and
    not ironic_pxe_tftp_root is none and
    ironic_pxe_uefi_pxe_bootfile_name is defined and
    ironic_pxe_uefi_pxe_bootfile_name == "elilo.efi"
  tags: ["elilo", "uefi"]


- name: Reload Ironic daemons
  service: name="{{ ironic_conductor_service_name }}" state=reloaded
  when: >
    __ironic_isolinux_template | changed or
    __ironic_grub_template | changed or
    __ironic_agent_pxe_template | changed or
    __ironic_pxe_template | changed or
    __ironic_pxe_uefi_template | changed or
    __ironic_ipxe_template | changed

