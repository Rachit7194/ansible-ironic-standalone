---
- name: Debian - Import repository key
  apt_key: url="{{ ironic_os_repo_key }}" state=present
  when: >
    ansible_os_family == 'Debian' and 
    not ironic_os_packages and
    not ironic_os_repo_key is none and
    ironic_os_repo_key | search("http://.*")
  ignore_errors: yes
  tags: ["ironic", "install", "debian"]

- name: Debian - Add repository package
  apt: name="{{ ironic_os_repo_key }}" state=latest
  when: >
    ansible_os_family == 'Debian' and 
    not ironic_os_packages and
    not ironic_os_repo_key is none and
    not ironic_os_repo_key | search("http://.*")
  tags: ["ironic", "install", "debian"]

- name: Debian - Add repository url
  apt_repository: repo="{{ ironic_os_repo_url }}" state=present
  when: >
    ansible_os_family == 'Debian' 
    and not ironic_os_packages
  tags: ["ironic", "install", "debian"]

- name: RedHat - Add repository
  yum: name="{{ ironic_os_repo_url }}" state=present
  when: >
    ansible_os_family == 'RedHat' and 
    not ironic_os_packages
  tags: ["ironic", "install", "redhat"]

- name: RedHat - Import repository key
  rpm_key: key="{{ ironic_os_repo_key }}" state=present
  when: >
    ansible_os_family == 'RedHat' and 
    not ironic_os_packages and 
    not ironic_os_repo_key is none
  tags: ["ironic", "install", "redhat"]

- name: Check if configuration exists
  stat: path="{{ ironic_config_file }}"
  register: __ironic_conf
  tags: ["ironic"]

- name: Setup configuration fact
  set_fact: _ironic_previous="{{ __ironic_conf.stat.exists }}"
  tags: ["ironic"]

- name: RedHat - Install required packages
  yum:
    name: "{{ item.key }}{{ '-' + item.version | default('*') }}"
    state: "{{ item.state | default('present') }}"
  with_dict: ironic_packages
  when: ansible_os_family == 'RedHat'
  register: __ironic_installed
  tags: ["ironic", "install", "redhat"]

- name: Debian - Install required packages
  apt: 
    name: "{{ item.key }}{{ '=' + item.version | default('*') }}"
    state: "{{ item.state | default('present') }}"
    install_recommends: "{{ ironic_packages_install_recommends }}"
  with_dict: ironic_packages
  when: ansible_os_family == 'Debian'
  register: __ironic_installed
  tags: ["ironic", "install", "debian"]

- name: Check if packages were installed
  set_fact: _ironic_reinstalled="{{ __ironic_installed.changed }}"
  tags: ["ironic"]

- name: RedHat - Install auxiliary packages
  yum:
    name: "{{ item.key }}{{ '-' + item.version | default('*') }}"
    state: "{{ item.state | default('present') }}"
  with_dict: ironic_packages_aux
  when: ansible_os_family == 'RedHat'
  tags: ["ironic", "install", "redhat", "aux"]

- name: Debian - Install auxiliary packages
  apt: 
    name: "{{ item.key }}{{ '=' + item.version | default('*') }}"
    state: "{{ item.state | default('present') }}"
    install_recommends: "{{ ironic_packages_install_recommends }}"
  with_dict: ironic_packages_aux
  when: ansible_os_family == 'Debian'
  tags: ["ironic", "install", "debian", "aux"]

# Because Ubuntu starts ironic daemons as part of the install process, 
# we need to stop it
- name: Stop daemons after initial install
  service: name="{{ item }}" state=stopped enabled=no
  with_items:
    - "{{ ironic_conductor_service_name }}"
    - "{{ ironic_api_service_name }}"
  ignore_errors: yes
  when: _ironic_reinstalled
  tags: ["ironic", "install"]

- name: Debian - Delete upstart configuration
  file:
    path: "/etc/init/{{ item }}.conf"
    state: absent
  with_items:
    - "{{ ironic_conductor_service_name }}"
    - "{{ ironic_api_service_name }}"
  when: >
    ansible_os_family == 'Debian' and
    ironic_init_system != "upstart"
  tags: ["ironic", "install"]

- name: Debian - Delete init.d configuration
  file:
    path: "/etc/init.d/{{ item }}"
    state: absent
  with_items:
    - "{{ ironic_conductor_service_name }}"
    - "{{ ironic_api_service_name }}"  
  when: >
    ansible_os_family == 'Debian' and
    ironic_init_system != "initd"
  tags: ["ironic", "install"]

- name: Ensure daemons are stopped
  service: name="{{ item }}" state=stopped enabled=no
  with_items:
    - "{{ ironic_conductor_service_name }}"
    - "{{ ironic_api_service_name }}"
  ignore_errors: yes
  when: _ironic_reinstalled
  tags: ["ironic", "install"]


