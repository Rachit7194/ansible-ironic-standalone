---
- name: Copy oslo policy file if defined
  copy:
    src: "{{ ironic_oslo_policy_file }}"
    dest: "{{ ironic_config_dir }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  when: >
    ironic_oslo_policy_file
    and ironic_oslo_policy_file is not none
  register: __ironic_policy_file

- name: Defining mysql connection
  set_fact: >
    ironic_database_connection="mysql://{{ironic_database_mysql_userid}}:{{ironic_database_mysql_password}}@{{ironic_database_mysql_host}}/{{ironic_database_mysql_db}}"
  when: >
    ironic_database_mysql_userid is defined and
    ironic_database_mysql_password is defined and
    ironic_database_mysql_host is defined and
    ironic_database_mysql_db is defined

- name: Generate the main configuration file
  template:
    src: ironic.conf.j2
    dest: "{{ ironic_config_file }}"
    owner: "{{ ironic_user }}"
    group: "{{ ironic_group }}"
    mode: 0644
  register: __ironic_updated_conf

- name: Check if configuration was updated
  set_fact: _ironic_updated="{{ __ironic_updated_conf.changed or __ironic_policy_file.changed }}"


- block:
  - name: Create initial database schema
    command: ironic-dbsync --config-file "{{ ironic_config_file }}" create_schema
    when: not _ironic_previous
    notify: restart api
    become_user: "{{ ironic_user }}"

  - name: Update database schema
    command: ironic-dbsync --config-file "{{ ironic_config_file }}" upgrade
    when: _ironic_previous
    become_user: "{{ ironic_user }}"
    notify: restart api

  - name: Delete SQLite database
    file: path="{{ ironic_var_dir }}/ironic.db" state=absent
    when: not _ironic_previous

  when: >
    not ironic_database_connection | search("sqlite://.*")
    and _ironic_api_reinstalled
    and _ironic_updated


- name: Stop Ironic-API daemon for the new configuration
  service: name="{{ ironic_api_service_name }}" state=stopped
  when: ironic_api and _ironic_updated

- name: Stop Ironic-Conductor daemon for the new configuration
  service: name="{{ ironic_conductor_service_name }}" state=stopped
  when: ironic_conductor and _ironic_updated

- name: Start Ironic-API daemon and ensure it is enabled on boot
  service: 
    name: "{{ ironic_api_service_name }}"
    state: started 
    enabled: "{{ ironic_enabled_on_startup | ternary('yes', 'no') }}"
  when: ironic_api

- name: Start Ironic-Conductor daemon and ensure it is enabled on boot
  service: 
    name: "{{ ironic_conductor_service_name }}" 
    state: started 
    enabled: "{{ ironic_enabled_on_startup | ternary('yes', 'no') }}"
  when: ironic_conductor

