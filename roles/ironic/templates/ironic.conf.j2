# {{ ansible_managed }}
# /etc/ironic/ironic.conf

[DEFAULT]
### Options defined in oslo.messaging

# Heartbeat frequency. (integer value)
#matchmaker_heartbeat_freq=300

# Heartbeat time-to-live. (integer value)
#matchmaker_heartbeat_ttl=600

# Size of executor thread pool. (integer value)
executor_thread_pool_size={{ ironic_executor_thread_pool_size | default('64') }}

# Size of RPC connection pool. (integer value)
rpc_conn_pool_size={{ ironic_rpc_conn_pool_size | default('30') }}

# Seconds to wait for a response from a call. (integer value)
#rpc_response_timeout=60

# The default number of seconds that poll should wait. 
# Poll raises timeout exception when timeout expired
rpc_poll_timeout=1

{% if ironic_notification_driver is defined and ironic_notification_driver -%}
# The Drivers(s) to handle sending notifications. Possible
# values are messaging, messagingv2, routing,log, test, noop
# (multi valued)
{% for driver in ironic_notification_driver -%}
notification_driver={{ driver }}
{% endfor %}

# AMQP topic used for OpenStack notifications. (list value)
# Deprecated group/name - [rpc_notifier2]/topics
notification_topics={{ ironic_notification_topics | default('notifications') }}
{% endif %}

{% if ironic_transport_url is defined and not ironic_transport_url is none -%}
# A URL representing the messaging driver to use and its full
# configuration. If not set, we fall back to the rpc_backend
# option and driver specific configuration. (string value)
transport_url={{ ironic_transport_url }}
{% else %}
# The messaging driver to use, defaults to rabbit. Other
# drivers include qpid and zmq. (string value)
rpc_backend={{ ironic_rpc_backend | default('rabbit') }}
{% endif %}

{% if ironic_control_exchange is defined and not ironic_control_exchange is none -%}
# The default exchange under which topics are scoped. May be
# overridden by an exchange name specified in the
# transport_url option. (string value)
control_exchange={{ ironic_control_exchange }}
{% endif %}

### Options defined in ironic.netconf

{% if ironic_my_ip is defined and ironic_my_ip | ipaddr -%}
# IP address of this host. If unset, will determine the IP
# programmatically. If unable to do so, will use "127.0.0.1".
# (string value)
my_ip={{ ironic_my_ip }}
{% endif %}

### Options defined in ironic.api.app

# Authentication strategy used by ironic-api: one of
# "keystone" or "noauth". "noauth" should not be used in a
# production environment because all authentication will be
# disabled. (string value)
auth_strategy={{ ironic_auth_strategy | default('noauth') }}

# Enable pecan debug mode. WARNING: this is insecure and
# should not be used in a production environment. (boolean
# value)
#pecan_debug=false


### Options defined in ironic.common.driver_factory

# Specify the list of drivers to load during service
# initialization. Missing drivers, or drivers which fail to
# initialize, will prevent the conductor service from
# starting. The option default is a recommended set of
# production-oriented drivers. A complete list of drivers
# present on your system may be found by enumerating the
# "ironic.drivers" entrypoint. An example may be found in the
# developer documentation online. (list value)
{% if ironic_enabled_drivers is defined and not ironic_enabled_drivers is none -%}
enabled_drivers={{ ironic_enabled_drivers | join(',') }}
{% else %}
enabled_drivers=pxe_ipmitool
{% endif %}


### Options defined in ironic.common.exception

# Used if there is a formatting error when generating an
# exception message (a programming error). If True, raise an
# exception; if False, use the unformatted message. (boolean
# value)
fatal_exception_format_errors={{ ironic_fatal_exception_format_errors | ternary('true','false') }}


### Options defined in ironic.common.hash_ring

# Exponent to determine number of hash partitions to use when
# distributing load across conductors. Larger values will
# result in more even distribution of load and less load when
# rebalancing the ring, but more memory usage. Number of
# partitions per conductor is (2^hash_partition_exponent).
# This determines the granularity of rebalancing: given 10
# hosts, and an exponent of the 2, there are 40 partitions in
# the ring.A few thousand partitions should make rebalancing
# smooth in most cases. The default is suitable for up to a
# few hundred conductors. Too many partitions has a CPU
# impact. (integer value)
#hash_partition_exponent=5

# [Experimental Feature] Number of hosts to map onto each hash
# partition. Setting this to more than one will cause
# additional conductor services to prepare deployment
# environments and potentially allow the Ironic cluster to
# recover more quickly if a conductor instance is terminated.
# (integer value)
#hash_distribution_replicas=1


## Options defined in ironic.common.images

# If True, convert backing images to "raw" disk image format.
# (boolean value)
force_raw_images={{ ironic_force_raw_images | ternary('true','false') }}

# Path to isolinux binary file. (string value)
isolinux_bin={{ ironic_isolinux_bin | default('/usr/lib/syslinux/isolinux.bin') }}

{% if ironic_isolinux_config_template is defined and not ironic_isolinux_config_template is none -%}
# Template file for isolinux configuration file. (string value)
# $pybasedir/common/isolinux_config.template
isolinux_config_template={{ ironic_state_path }}/{{ ironic_isolinux_config_template | basename }}
{% endif %}

{% if ironic_grub_config_template is defined and not ironic_grub_config_template is none -%}
# Template file for grub configuration file. (string value)
# $pybasedir/common/grub_conf.template
grub_config_template={{ ironic_state_path }}/{{ ironic_grub_config_template | basename }}
{% endif %}

### Options defined in ironic.common.paths

# Directory where the ironic python module is installed.
# (string value)
pybasedir={{ ironic_pybasedir | default('/usr/lib/python2.7/dist-packages/ironic') }}

# Directory where ironic binaries are installed. (string value)
bindir={{ ironic_bindir | default('/usr/bin') }}

# Top-level directory for maintaining ironic's state. (string value)
state_path={{ ironic_state_path | default('/var/lib/ironic') }}

### Options defined in ironic.common.service

# Seconds between running periodic tasks. (integer value)
#periodic_interval=60

# Name of this node.  This can be an opaque identifier.  It is
# not necessarily a hostname, FQDN, or IP address. However,
# the node name must be valid within an AMQP key, and if using
# ZeroMQ, a valid hostname, FQDN, or IP address. (string value)
host={{ ironic_host | default('ironic') }}


### Options defined in ironic.common.utils

# Path to the rootwrap configuration file to use for running
# commands as root. (string value)
rootwrap_config=/etc/ironic/rootwrap.conf

# Explicitly specify the temporary working directory. (string value)
tempdir={{ ironic_tempdir | default('/tmp') }}


### Options defined in ironic.drivers.modules.image_cache

# Run image downloads and raw format conversions in parallel.
# (boolean value)
parallel_image_downloads={{ ironic_parallel_image_downloads | ternary('true','false') }}


### Options defined in ironic.openstack.common.eventlet_backdoor

# Enable eventlet backdoor.  Acceptable values are 0, <port>,
# and <start>:<end>, where 0 results in listening on a random
# tcp port number; <port> results in listening on the
# specified port number (and not enabling backdoor if that
# port is in use); and <start>:<end> results in listening on
# the smallest unused port number within the specified range
# of port numbers.  The chosen port is displayed in the
# service's log file. (string value)
#backdoor_port=<None>


### Options defined in ironic.openstack.common.log

# Print debugging output (set logging level to DEBUG instead
# of default WARNING level). (boolean value)
debug={{ ironic_debug | ternary('true','false') }}

# Print more verbose output (set logging level to INFO instead
# of default WARNING level). (boolean value)
verbose={{ ironic_verbose | ternary('true','false') }}

# The name of a logging configuration file. This file is
# appended to any existing logging configuration files. For
# details about logging configuration files, see the Python
# logging module documentation. (string value)
# Deprecated group/name - [DEFAULT]/log_config
#log_config_append=<None>

{% if ironic_watch_log_file is defined %}
# (BoolOpt) (Optional) Uses logging handler designed to watch file system. 
# When log file is moved or removed this handler will open a new log 
# file with specified path instantaneously. It makes sense only if 
# log-file option is specified and Linux platform is used. 
# This option is ignored if log_config_append is set.
watch_log_file={{ ironic_watch_log_file | ternary('true','false') }}
{% endif %}

# Format string for %%(asctime)s in log records. Default:
# %(default)s . (string value)
#log_date_format=%Y-%m-%d %H:%M:%S

{% if ironic_log is defined %}
{% if ironic_log == 'syslog' %}
# Use syslog for logging. Existing syslog format is DEPRECATED
# during I, and will change in J to honor RFC5424. (boolean
# value)
use_syslog=true

# (Optional) Enables or disables syslog rfc5424 format for
# logging. If enabled, prefixes the MSG part of the syslog
# message with APP-NAME (RFC5424). The format without the APP-
# NAME is deprecated in I, and will be removed in J. (boolean
# value)
use_syslog_rfc_format=true

# Syslog facility to receive log lines. (string value)
syslog_log_facility=LOG_USER
{% else %}
# (Optional) Name of log file to output to. If no default is
# set, logging will go to stdout. (string value)
# Deprecated group/name - [DEFAULT]/logfile
log_file={{ ironic_log | basename }}

# (Optional) The base directory used for relative --log-file
# paths. (string value)
# Deprecated group/name - [DEFAULT]/logdir
log_dir={{ ironic_log | dirname }}
{% endif %}
{% else %}
# Log output to standard error. (boolean value)
use_stderr=true
{% endif %}

# Format string to use for log messages with context. (string value)
logging_context_format_string=%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s

# Format string to use for log messages without context. (string value)
logging_default_format_string=%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s

# Data to append to log format when level is DEBUG. (string value)
logging_debug_format_suffix=%(funcName)s %(pathname)s:%(lineno)d

# Prefix each line of exception output with this format. (string value)
logging_exception_prefix=%(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s

# List of logger=LEVEL pairs. (list value)
#default_log_levels=amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,oslo.messaging=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN,urllib3.connectionpool=WARN,websocket=WARN,keystonemiddleware=WARN,routes.middleware=WARN,stevedore=WARN

# Enables or disables publication of error events. (boolean value)
publish_errors={{ ironic_publish_errors | ternary('true','false') }}

# Enables or disables fatal status of deprecations. (boolean value)
fatal_deprecations={{ ironic_fatal_deprecations | ternary('true','false') }}

# The format for an instance that is passed with the log
# message. (string value)
#instance_format="[instance: %(uuid)s] "

# The format for an instance UUID that is passed with the log
# message. (string value)
#instance_uuid_format="[instance: %(uuid)s] "


### Options defined in ironic.openstack.common.periodic_task

# Some periodic tasks can be run in a separate process. Should
# we run them here? (boolean value)
run_external_periodic_tasks={{ ironic_run_external_periodic_tasks | ternary('true','false') }}


[api]
### Options defined in ironic.api

# The IP address on which ironic-api listens. (string value)
host_ip={{ ironic_api_host_ip | default('0.0.0.0') }}

# The TCP port on which ironic-api listens. (integer value)
port={{ ironic_api_port | default('6385') }}

# The maximum number of items returned in a single response
# from a collection resource. (integer value)
#max_limit=1000

# Public URL to use when building the links to the API
# resources (for example, "https://ironic.rocks:6384"). If
# None the links will be built using the request's host URL.
# If the API is operating behind a proxy, you will want to
# change this to represent the proxy's URL. Defaults to None.
# (string value)
#public_endpoint=<None>
{% if ironic_api_public_endpoint is defined and not ironic_api_public_endpoint is none -%}
public_endpoint={{ ironic_api_public_endpoint }}
{% endif %}


[cors]
# Options defined in oslo.middleware.cors

# Indicate whether this resource may be shared with the domain
# received in the requests "origin" header. (string value)
#allowed_origin=
{% if ironic_cors_allowed_origin is defined and not ironic_cors_allowed_origin is none -%}
allowed_origin={{ ironic_cors_allowed_origin }}
{% endif %}

# Indicate that the actual request can include user
# credentials (boolean value)
allow_credentials={{ ironic_cors_allow_credentials | ternary('true','false') }}

# Indicate which headers are safe to expose to the API.
# Defaults to HTTP Simple Headers. (list value)
#expose_headers=Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma
{% if ironic_cors_expose_headers is defined -%}
expose_headers={{ ironic_cors_expose_headers | join(',') }}
{% endif %}

# Maximum cache age of CORS preflight requests. (integer value)
max_age={{ ironic_cors_max_age | default('3600') }}

# Indicate which methods can be used during the actual request. (list value)
#allow_methods=GET,POST,PUT,DELETE,OPTIONS
{% if ironic_cors_allow_methods is defined -%}
allow_methods={{ ironic_cors_allow_methods | join(',') }}
{% endif %}

# Indicate which header field names may be used during the
# actual request. (list value)
#allow_headers=Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma
{% if ironic_cors_allow_headers is defined -%}
allow_headers={{ ironic_cors_allow_headers | join(',') }}
{% endif %}


### [cors.subdomain]
{% if ironic_cors_domains is defined -%}
{% for (key, values) in ironic_cors_domains.iteritems() %}
[cors.{{ key }}]
{% if values["allowed_origin"] is defined -%}
allowed_origin={{ values["allowed_origin"] }}
{% endif %}

{%- if values["allow_credentials"] is defined -%}
allow_credentials={{ values["allow_credentials"] | ternary('true','false') }}
{% endif %}

{%- if values["expose_headers"] is defined -%}
expose_headers={{ values["expose_headers"] | join(',') }}
{% endif %}

{%- if values["max_age"] is defined -%}
max_age={{ values["max_age"] | default('3600') }}
{% endif %}

{%- if values["allow_methods"] is defined -%}
allow_methods={{ values["allow_methods"] | join(',') }}
{% endif %}

{%- if values["allow_headers"] is defined -%}
allow_headers={{ values["allow_headers"] | join(',') }}
{% endif %}

{% endfor %}
{% endif %}


[conductor]
### Options defined in ironic.conductor.manager

{% if ironic_conductor_api_url is defined and not ironic_conductor_api_url is none -%}
# URL of Ironic API service. If not set ironic can get the
# current value from the keystone service catalog. (string value)
api_url={{ ironic_conductor_api_url }}
{% endif %}

# Seconds between conductor heart beats. (integer value)
#heartbeat_interval=10

# Maximum time (in seconds) since the last check-in of a
# conductor. A conductor is considered inactive when this time
# has been exceeded. (integer value)
#heartbeat_timeout=60

# Interval between syncing the node power state to the
# database, in seconds. (integer value)
sync_power_state_interval={{ ironic_conductor_sync_power_state_interval | default('60') }}

# Interval between checks of provision timeouts, in seconds. (integer value)
check_provision_state_interval={{ ironic_conductor_check_provision_state_interval | default('60') }}

# Timeout (seconds) to wait for a callback from a deploy
# ramdisk. Set to 0 to disable timeout. (integer value)
deploy_callback_timeout={{ ironic_conductor_deploy_callback_timeout | default('1800') }}

# During sync_power_state, should the hardware power state be
# set to the state recorded in the database (True) or should
# the database be updated based on the hardware state (False).
# (boolean value)
force_power_state_during_sync={{ ironic_conductor_force_power_state_during_sync | ternary('true','false') }}

# During sync_power_state failures, limit the number of times
# Ironic should try syncing the hardware node power state with
# the node power state in DB (integer value)
#power_state_sync_max_retries=3

# Maximum number of worker threads that can be started
# simultaneously by a periodic task. Should be less than RPC
# thread pool size. (integer value)
#periodic_max_workers=8

# The size of the workers greenthread pool. (integer value)
#workers_pool_size=100

# Number of attempts to grab a node lock. (integer value)
#node_locked_retry_attempts=3

# Seconds to sleep between node lock attempts. (integer value)
#node_locked_retry_interval=1

{% if ironic_conductor_send_sensor_data is defined and ironic_conductor_send_sensor_data -%}
# Enable sending sensor data message via the notification bus
# (boolean value)
send_sensor_data=true

# Seconds between conductor sending sensor data message to
# ceilometer via the notification bus. (integer value)
send_sensor_data_interval={{ ironic_conductor_send_sensor_data_interval | default('600') }}

# List of comma separated meter types which need to be sent to
# Ceilometer. The default value, "ALL", is a special value
# meaning send all the sensor data. (list value)
send_sensor_data_types={{ ironic_conductor_send_sensor_data | join(',') }}
{% else %}
send_sensor_data=false
{% endif %}

# When conductors join or leave the cluster, existing
# conductors may need to update any persistent local state as
# nodes are moved around the cluster. This option controls how
# often, in seconds, each conductor will check for nodes that
# it should "take over". Set it to a negative value to disable
# the check entirely. (integer value)
#sync_local_state_interval=180

{% if ironic_conductor_configdrive_swift is defined and not ironic_conductor_configdrive_swift is none -%}
# Whether to upload the config drive to Swift. (boolean value)
configdrive_use_swift=true

# Name of the Swift container to store config drive data. Used
# when configdrive_use_swift is True. (string value)
configdrive_swift_container={{ ironic_conductor_configdrive_swift }}
{% else %}
configdrive_use_swift=false
{% endif %}

# Timeout (seconds) for waiting for node inspection. 0 -
# unlimited. (integer value)
inspect_timeout={{ ironic_conductor_inspect_timeout | default('1800') }}

# Cleaning is a configurable set of steps, such as erasing
# disk drives, that are performed on the node to ensure it is
# in a baseline state and ready to be deployed to. This is
# done after instance deletion, and during the transition from
# a "managed" to "available" state. When enabled, the
# particular steps performed to clean a node depend on which
# driver that node is managed by; see the individual driver's
# documentation for details. NOTE: The introduction of the
# cleaning operation causes instance deletion to take
# significantly longer. In an environment where all tenants
# are trusted (eg, because there is only one tenant), this
# option could be safely disabled. (boolean value)
clean_nodes={{ ironic_conductor_clean_nodes | ternary('true','false') }}

# Timeout (seconds) to wait for a callback from the ramdisk
# doing the cleaning. If the timeout is reached the node will
# be put in the "clean failed" provision state. Set to 0 to
# disable timeout. (integer value)
#clean_callback_timeout=1800


[database]
### Options defined in oslo.db

# The back end to use for the database. (string value)
# Deprecated group/name - [DEFAULT]/db_backend
backend=sqlalchemy

# The SQLAlchemy connection string to use to connect to the
# database. (string value)
# Deprecated group/name - [DEFAULT]/sql_connection
# Deprecated group/name - [DATABASE]/sql_connection
# Deprecated group/name - [sql]/connection
{% if ironic_database_connection is defined and ironic_database_connection | match("mysql://.*") -%}
connection="{{ ironic_database_connection }}"
{% else %}
{% if not ironic_database_connection is defined -%}
{% set ironic_database_connection="sqlite:///var/lib/ironic/ironic.db" %}
{% endif %}
connection="{{ ironic_database_connection }}"

# The file name to use with SQLite. (string value)
sqlite_db={{ ironic_database_connection | basename }}

# If True, SQLite uses synchronous mode. (boolean value)
sqlite_synchronous=true
{% endif %}

# The SQLAlchemy connection string to use to connect to the
# slave database. (string value)
#slave_connection=<None>

# Timeout before idle SQL connections are reaped. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_idle_timeout
# Deprecated group/name - [DATABASE]/sql_idle_timeout
# Deprecated group/name - [sql]/idle_timeout
idle_timeout={{ ironic_database_idle_timeout | default('600') }}

# Minimum number of SQL connections to keep open in a pool.
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_min_pool_size
# Deprecated group/name - [DATABASE]/sql_min_pool_size
min_pool_size=1

# Maximum number of SQL connections to keep open in a pool.
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_pool_size
# Deprecated group/name - [DATABASE]/sql_max_pool_size
max_pool_size={{ ironic_database_pool_size | default('10') }}

# Maximum number of database connection retries during
# startup. Set to -1 to specify an infinite retry count.
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_retries
# Deprecated group/name - [DATABASE]/sql_max_retries
#max_retries=10

# Interval between retries of opening a SQL connection.
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_retry_interval
# Deprecated group/name - [DATABASE]/reconnect_interval
#retry_interval=10

# If set, use this value for max_overflow with SQLAlchemy.
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_overflow
# Deprecated group/name - [DATABASE]/sqlalchemy_max_overflow
#max_overflow=<None>


{% if ironic_debug and ironic_trace -%}
# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer value)
# Deprecated group/name - [DEFAULT]/sql_connection_debug
connection_debug=100

# Add Python stack traces to SQL as comment strings. (boolean value)
# Deprecated group/name - [DEFAULT]/sql_connection_trace
connection_trace=true
{% elif ironic_debug %}
# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer value)
# Deprecated group/name - [DEFAULT]/sql_connection_debug
connection_debug=50

# Add Python stack traces to SQL as comment strings. (boolean value)
# Deprecated group/name - [DEFAULT]/sql_connection_trace
connection_trace=false
{% else %}
# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer value)
# Deprecated group/name - [DEFAULT]/sql_connection_debug
connection_debug=0

# Add Python stack traces to SQL as comment strings. (boolean value)
# Deprecated group/name - [DEFAULT]/sql_connection_trace
connection_trace=false
{% endif %}

{% if ironic_database_pool_timeout is defined and not ironic_database_pool_timeout is none -%}
# If set, use this value for pool_timeout with SQLAlchemy. (integer value)
# Deprecated group/name - [DATABASE]/sqlalchemy_pool_timeout
pool_timeout={{ ironic_database_pool_timeout }}
{% endif %}

# Enable the experimental use of database reconnect on
# connection lost. (boolean value)
use_db_reconnect={{ ironic_database_use_db_reconnect | ternary('true','false') }}

# Seconds between retries of a database transaction. (integer value)
#db_retry_interval=1

# If True, increases the interval between retries of a
# database operation up to db_max_retry_interval. (boolean value)
#db_inc_retry_interval=true

# If db_inc_retry_interval is set, the maximum seconds between
# retries of a database operation. (integer value)
#db_max_retry_interval=10

# Maximum retries in case of connection error or deadlock
# error before error is raised. Set to -1 to specify an
# infinite retry count. (integer value)
#db_max_retries=20


{% if ironic_auth_strategy == 'keystone' -%}
[keystone]
### Options defined in ironic.common.keystone

{% if ironic_keystone_region_name  is defined -%}
# The region used for getting endpoints of OpenStackservices.
# (string value)
region_name={{ ironic_keystone_region_name }}
{% endif %}

[keystone_authtoken]
### Options defined in keystonemiddleware.auth_token

{% if ironic_keystone_authtoken_auth_uri is defined -%}
# Complete public Identity API endpoint. (string value)
auth_uri={{ ironic_keystone_authtoken_auth_uri }}
{% endif %}

{% if ironic_keystone_authtoken_auth_version is defined -%}
# API version of the admin Identity API endpoint. (string value)
auth_version={{ ironic_keystone_authtoken_auth_version }}
{% endif %}

# Do not handle authorization requests within the middleware,
# but delegate the authorization decision to downstream WSGI
# components. (boolean value)
#delay_auth_decision=false

# Request timeout value for communicating with Identity API
# server. (integer value)
#http_connect_timeout=<None>

# How many times are we trying to reconnect when communicating
# with Identity API Server. (integer value)
#http_request_max_retries=3

# Env key for the swift cache. (string value)
#cache=<None>

# Required if identity server requires client certificate
# (string value)
#certfile=<None>

# Required if identity server requires client certificate
# (string value)
#keyfile=<None>

# A PEM encoded Certificate Authority to use when verifying
# HTTPs connections. Defaults to system CAs. (string value)
#cafile=<None>

# Verify HTTPS connections. (boolean value)
#insecure=false

# Directory used to cache files related to PKI tokens. (string value)
#signing_dir=<None>

# Optionally specify a list of memcached server(s) to use for
# caching. If left undefined, tokens will instead be cached
# in-process. (list value)
# Deprecated group/name - [DEFAULT]/memcache_servers
#memcached_servers=<None>

# In order to prevent excessive effort spent validating
# tokens, the middleware caches previously-seen tokens for a
# configurable duration (in seconds). Set to -1 to disable
# caching completely. (integer value)
#token_cache_time=300

# Determines the frequency at which the list of revoked tokens
# is retrieved from the Identity service (in seconds). A high
# number of revocation events combined with a low cache
# duration may significantly reduce performance. (integer value)
#revocation_cache_time=10

# (Optional) If defined, indicate whether token data should be
# authenticated or authenticated and encrypted. Acceptable
# values are MAC or ENCRYPT.  If MAC, token data is
# authenticated (with HMAC) in the cache. If ENCRYPT, token
# data is encrypted and authenticated in the cache. If the
# value is not one of these options or empty, auth_token will
# raise an exception on initialization. (string value)
#memcache_security_strategy=<None>

# (Optional, mandatory if memcache_security_strategy is
# defined) This string is used for key derivation. (string value)
#memcache_secret_key=<None>

# (Optional) Number of seconds memcached server is considered
# dead before it is tried again. (integer value)
#memcache_pool_dead_retry=300

# (Optional) Maximum total number of open connections to every
# memcached server. (integer value)
#memcache_pool_maxsize=10

# (Optional) Socket timeout in seconds for communicating with
# a memcached server. (integer value)
#memcache_pool_socket_timeout=3

# (Optional) Number of seconds a connection to memcached is
# held unused in the pool before it is closed. (integer value)
#memcache_pool_unused_timeout=60

# (Optional) Number of seconds that an operation will wait to
# get a memcached client connection from the pool. (integer value)
#memcache_pool_conn_get_timeout=10

# (Optional) Use the advanced (eventlet safe) memcached client
# pool. The advanced pool will only work under python 2.x.
# (boolean value)
#memcache_use_advanced_pool=false

# (Optional) Indicate whether to set the X-Service-Catalog
# header. If False, middleware will not ask for service
# catalog on token validation and will not set the X-Service-
# Catalog header. (boolean value)
#include_service_catalog=true

# Used to control the use and type of token binding. Can be
# set to: "disabled" to not check token binding. "permissive"
# (default) to validate binding information if the bind type
# is of a form known to the server and ignore it if not.
# "strict" like "permissive" but if the bind type is unknown
# the token will be rejected. "required" any form of token
# binding is needed to be allowed. Finally the name of a
# binding method that must be present in tokens. (string value)
#enforce_token_bind=permissive

# If true, the revocation list will be checked for cached
# tokens. This requires that PKI tokens are configured on the
# identity server. (boolean value)
#check_revocations_for_cached=false

# Hash algorithms to use for hashing PKI tokens. This may be a
# single algorithm or multiple. The algorithms are those
# supported by Python standard hashlib.new(). The hashes will
# be tried in the order given, so put the preferred one first
# for performance. The result of the first hash will be stored
# in the cache. This will typically be set to multiple values
# only while migrating from a less secure algorithm to a more
# secure one. Once all the old tokens are expired this option
# should be set to a single value for better performance.
# (list value)
#hash_algorithms=md5

{% if ironic_keystone_authtoken_identity_uri is defined and not ironic_keystone_authtoken_identity_uri is none -%}
# Complete admin Identity API endpoint. This should specify
# the unversioned root endpoint e.g. https://localhost:35357/
# (string value)
identity_uri={{ ironic_keystone_authtoken_identity_uri }}
{% endif %}

{% if ironic_keystone_authtoken_service_user is defined and not ironic_keystone_authtoken_service_user is none -%}
# Service username. (string value)
admin_user={{ ironic_keystone_authtoken_service_user }}
{% endif %}

{% if ironic_keystone_authtoken_service_password is defined and not ironic_keystone_authtoken_service_password is none -%}
# Service user password. (string value)
admin_password={{ ironic_keystone_authtoken_service_password }}
{% endif %}

# Service tenant name. (string value)
admin_tenant_name={{ ironic_keystone_authtoken_service_tenant_name | default('admin') }}
{% endif %}


{% if ironic_neutron_url is defined and not ironic_neutron_url is none -%}
[neutron]
### Options defined in ironic.dhcp.neutron

# URL for connecting to neutron. (string value)
url={{ ironic_neutron_url }}

# Timeout value for connecting to neutron in seconds. (integer value)
#url_timeout=30

# Client retries in the case of a failed request. (integer value)
#retries=3

# Default authentication strategy to use when connecting to
# neutron. Can be either "keystone" or "noauth". Running
# neutron in noauth mode (related to but not affected by this
# setting) is insecure and should only be used for testing.
# (string value)
auth_strategy={{ ironic_neutron_auth_strategy | default(ironic_auth_strategy) }}

# UUID of the network to create Neutron ports on when booting
# to a ramdisk for cleaning/zapping using Neutron DHCP (string value)
cleaning_network_uuid={{ ironic_neutron_cleaning_network_uuid | default('') }}
{% endif %}


[oslo_concurrency]
### Options defined in oslo.concurrency

{% if ironic_oslo_concurrency_lock_path is defined and not ironic_oslo_concurrency_lock_path is none -%}
# Enables or disables inter-process locks. (boolean value)
disable_process_locking=false

# Directory to use for lock files.  For security, the
# specified directory should only be writable by the user
# running the processes that need locking. Defaults to
# environment variable OSLO_LOCK_PATH. If external locks are
# used, a lock path must be set. (string value)
lock_path={{ ironic_oslo_concurrency_lock_path }}
{% else %}
disable_process_locking=true
{% endif %}


[oslo_messaging_amqp]
### Options defined in oslo.messaging

# address prefix used when sending to a specific server
# (string value)
#server_request_prefix=exclusive

# address prefix used when broadcasting to all servers (string value)
#broadcast_prefix=broadcast

# address prefix when sending to any server in group (string value)
#group_request_prefix=unicast

{% if ironic_oslo_messaging_amqp_container_name is defined and not ironic_oslo_messaging_amqp_container_name is none -%}
# Name for the AMQP container (string value)
container_name={{ ironic_oslo_messaging_amqp_container_name }}
{% endif %}

# Timeout for inactive connections (in seconds) (integer value)
idle_timeout={{ ironic_oslo_messaging_amqp_idle_timeout | default('0') }}

# Debug: dump AMQP frames to stdout (boolean value)
trace={{ ironic_trace | ternary('true','false') }}

# CA certificate PEM file to verify server certificate (string value)
#ssl_ca_file=

# Identifying certificate PEM file to present to clients
# (string value)
#ssl_cert_file=

# Private key PEM file used to sign cert_file certificate
# (string value)
#ssl_key_file=

# Password for decrypting ssl_key_file (if encrypted) (string value)
#ssl_key_password=<None>

# Accept clients using either SSL or plain TCP (boolean value)
#allow_insecure_clients=false


{% if ironic_rpc_backend == 'rabbit' -%}
[oslo_messaging_rabbit]
### Options defined in oslo.messaging

# Use durable queues in AMQP. (boolean value)
# Deprecated group/name - [DEFAULT]/amqp_durable_queues
# Deprecated group/name - [DEFAULT]/rabbit_durable_queues
amqp_durable_queues={{ ironic_oslo_messaging_rabbit_amqp_durable_queues | ternary('true','false') }}

# Auto-delete queues in AMQP. (boolean value)
amqp_auto_delete={{ ironic_oslo_messaging_rabbit_amqp_auto_delete | ternary('true','false') }}

# SSL version to use (valid only if SSL enabled). Valid values
# are TLSv1 and SSLv23. SSLv2, SSLv3, TLSv1_1, and TLSv1_2 may
# be available on some distributions. (string value)
#kombu_ssl_version=

# SSL key file (valid only if SSL enabled). (string value)
#kombu_ssl_keyfile=

# SSL cert file (valid only if SSL enabled). (string value)
#kombu_ssl_certfile=

# SSL certification authority file (valid only if SSL
# enabled). (string value)
#kombu_ssl_ca_certs=

# How long to wait before reconnecting in response to an AMQP
# consumer cancel notification. (floating point value)
#kombu_reconnect_delay=1.0

# (IntOpt) How long to wait before considering a reconnect attempt to 
# have failed. This value should not be longer than rpc_response_timeout.
#kombu_reconnect_timeout=60

# The RabbitMQ broker address where a single node is used.
# (string value)
rabbit_host={{ ironic_oslo_messaging_rabbit_host | default('localhost') }}

# The RabbitMQ broker port where a single node is used.
# (integer value)
rabbit_port={{ ironic_oslo_messaging_rabbit_port | default('5672') }}

# RabbitMQ HA cluster host:port pairs. (list value)
rabbit_hosts=$rabbit_host:$rabbit_port

# Connect over SSL for RabbitMQ. (boolean value)
rabbit_use_ssl=false

# The RabbitMQ userid. (string value)
rabbit_userid={{ ironic_oslo_messaging_rabbit_userid | default('guest') }}

# The RabbitMQ password. (string value)
rabbit_password={{ ironic_oslo_messaging_rabbit_password | default('guest') }}

# The RabbitMQ login method. (string value)
rabbit_login_method={{ ironic_oslo_messaging_rabbit_login_method | default('AMQPLAIN') }}

# The RabbitMQ virtual host. (string value)
rabbit_virtual_host={{ ironic_oslo_messaging_rabbit_virtual_host | default('/') }}

# How frequently to retry connecting with RabbitMQ. (integer value)
#rabbit_retry_interval=1

# How long to backoff for between retries when connecting to
# RabbitMQ. (integer value)
#rabbit_retry_backoff=2

# Maximum number of RabbitMQ connection retries. Default is 0
# (infinite retry count). (integer value)
rabbit_max_retries={{ ironic_oslo_messaging_rabbit_max_retries | default('0') }}

# Use HA queues in RabbitMQ (x-ha-policy: all). If you change
# this option, you must wipe the RabbitMQ database. (boolean value)
rabbit_ha_queues={{ ironic_oslo_messaging_rabbit_ha_queues | ternary('true','false') }}

# Number of seconds after which the Rabbit broker is
# considered down if heartbeat's keep-alive fails (0 disable
# the heartbeat). (integer value)
heartbeat_timeout_threshold={{ ironic_oslo_messaging_heartbeat_timeout_threshold | default('60') }}

# How often times during the heartbeat_timeout_threshold we
# check the heartbeat. (integer value)
#heartbeat_rate=2
{% endif %}


[oslo_policy]
### Options defined in oslo.policy

{% if ironic_oslo_policy_file is defined and not ironic_oslo_policy_file is none -%}
# The JSON file that defines policies. (string value)
policy_file={{ ironic_oslo_policy_file | basename }}

# Default rule. Enforced when a requested rule is not found.
# (string value)
policy_default_rule=default

# Directories where policy configuration files are stored.
# They can be relative to any directory in the search path
# defined by the config_dir option, or absolute paths. The
# file defined by policy_file must exist for these directories
# to be searched.  Missing or empty directories are ignored.
# (multi valued)
policy_dirs={{ ironic_oslo_policy_file | dirname }}
{% endif %}


[deploy]
### Options defined in ironic.drivers.modules.deploy_utils

# Size of EFI system partition in MiB when configuring UEFI
# systems for local boot. (integer value)
efi_system_partition_size={{ ironic_deploy_efi_system_partition_size | default('200') }}

# Block size to use when writing to the nodes disk. (string value)
dd_block_size={{ ironic_deploy_dd_block_size | default('1M') }}

# Maximum attempts to verify an iSCSI connection is active,
# sleeping 1 second between attempts. (integer value)
#iscsi_verify_attempts=3

{% if ironic_deploy_http_url is defined and not ironic_deploy_http_url is none -%}
# ironic-conductor node's HTTP server URL. Example:
# http://192.1.2.3:8080 (string value)
http_url={{ ironic_deploy_http_url }}

# ironic-conductor node's HTTP root path. (string value)
http_root={{ ironic_deploy_http_root | default('/httpboot') }}
{% endif %}

{% if ironic_deploy_erase_devices_priority is defined and not ironic_deploy_erase_devices_priority is none -%}
# Priority to run in-band erase devices via the Ironic Python
# Agent ramdisk. If unset, will use the priority set in the
# ramdisk (defaults to 10 for the GenericHardwareManager). If
# set to 0, will not run during cleaning. (integer value)
# Deprecated group/name - [agent]/agent_erase_devices_priority
erase_devices_priority={{ ironic_deploy_erase_devices_priority }}
{% endif %}

# Number of iterations to be run for erasing devices. (integer
# value)
# Deprecated group/name - [agent]/agent_erase_devices_iterations
#erase_devices_iterations=1


[dhcp]
### Options defined in ironic.common.dhcp_factory

# DHCP provider to use. "neutron" uses Neutron, and "none"
# uses a no-op provider. (string value)
{% if ironic_neutron_url is defined and not ironic_neutron_url is none -%}
dhcp_provider=neutron
{% else %}
dhcp_provider=none
{% endif %}


[inspector]
### Options defined in ironic.drivers.modules.inspector

# whether to enable inspection using ironic-inspector (boolean value)
{% if ironic_inspector_service_url is defined and not ironic_inspector_service_url is none -%}
enabled=true

# ironic-discoverd HTTP endpoint. If this is not set, the
# ironic-discoverd client default (http://127.0.0.1:5050) will
# be used. (string value)
service_url={{ ironic_inspector_service_url }}

# period (in seconds) to check status of nodes on inspection
# (integer value)
status_check_period={{ ironic_inspector_status_check_period | default('60') }}
{% else %}
enabled=false
{% endif %}


[disk_partitioner]
### Options defined in ironic.common.disk_partitioner

# After Ironic has completed creating the partition table, it
# continues to check for activity on the attached iSCSI device
# status at this interval prior to copying the image to the
# node, in seconds (integer value)
#check_device_interval=1

# The maximum number of times to check that the device is not
# accessed by another process. If the device is still busy
# after that, the disk partitioning will be treated as having
# failed. (integer value)
check_device_max_retries=30


[glance]
### Options defined in ironic.common.glance_service.v2.image_service

# A list of URL schemes that can be downloaded directly via
# the direct_url.  Currently supported schemes: [file]. (list value)
#allowed_direct_url_schemes=

{% if ironic_glance_swift_endpoint_url is defined and not ironic_glance_swift_endpoint_url is none -%}
# The "endpoint" (scheme, hostname, optional port) for the
# Swift URL of the form
# "endpoint_url/api_version/account/container/object_id". Do
# not include trailing "/". For example, use
# "https://swift.example.com". Required for temporary URLs.
# (string value)
swift_endpoint_url={{ ironic_glance_swift_endpoint_url }}

{% if ironic_glance_swift_temp_url_key is defined and not ironic_glance_swift_temp_url_key is none -%}
# The secret token given to Swift to allow temporary URL
# downloads. Required for temporary URLs. (string value)
swift_temp_url_key={{ ironic_glance_swift_temp_url_key }}
{% endif %}

# The length of time in seconds that the temporary URL will be
# valid for. Defaults to 20 minutes. If some deploys get a 401
# response code when trying to download from the temporary
# URL, try raising this duration. (integer value)
swift_temp_url_duration={{ ironic_glance_swift_temp_url_duration | default('1200') }}

# This should match a config by the same name in the Glance
# configuration file. When set to 0, a single-tenant store
# will only use one container to store all images. When set to
# an integer value between 1 and 32, a single-tenant store
# will use multiple containers to store images, and this value
# will determine how many containers are created. (integer
# value)
#swift_store_multiple_containers_seed=0
{% endif %}


### Options defined in ironic.common.image_service

# Default glance hostname or IP address. (string value)
#glance_host=$my_ip

# Default glance port. (integer value)
#glance_port=9292

# Default protocol to use when connecting to glance. Set to
# https for SSL. (string value)
#glance_protocol=http

{% if ironic_glance_api_servers is defined and not ironic_glance_api_servers is none -%}
# A list of the glance api servers available to ironic. Prefix
# with https:// for SSL-based glance API servers. Format is
# [hostname|IP]:port. (list value)
glance_api_servers={{ ironic_glance_api_servers | join(',') }}
{% endif %}

# Allow to perform insecure SSL (https) requests to glance.
# (boolean value)
#glance_api_insecure=false

# Number of retries when downloading an image from glance.
# (integer value)
#glance_num_retries=0

# Authentication strategy to use when connecting to glance.
# Only "keystone" and "noauth" are currently supported by
# ironic. (string value)
auth_strategy={{ ironic_glace_auth_strategy | default(ironic_auth_strategy) }}


[console]
### Options defined in ironic.drivers.modules.console_utils

# Path to serial console terminal program (string value)
terminal={{ ironic_console_terminal | default('shellinaboxd') }}

# Directory containing the terminal SSL cert(PEM) for serial
# console access (string value)
#terminal_cert_dir=<None>

# Directory for holding terminal pid files. If not specified,
# the temporary directory will be used. (string value)
terminal_pid_dir={{ ironic_console_terminal_pid_dir | default(ironic_tempdir) }}

# Time interval (in seconds) for checking the status of
# console subprocess. (integer value)
#subprocess_checking_interval=1

# Time (in seconds) to wait for the console subprocess to
# start. (integer value)
#subprocess_timeout=10


[agent]
### Options defined in ironic.drivers.modules.agent

# Number of times to retry getting power state to check if
# bare metal node has been powered off after a soft power off.
# (integer value)
#post_deploy_get_power_state_retries=6

# Amount of time (in seconds) to wait between polling power
# state after trigger soft poweroff. (integer value)
#post_deploy_get_power_state_retry_interval=5

# The memory size in MiB consumed by agent when it is booted
# on a bare metal node. This is used for checking if the image
# can be downloaded and deployed on the bare metal node after
# booting agent ramdisk. This may be set according to the
# memory consumed by the agent ramdisk image. (integer value)
memory_consumed_by_agent={{ ironic_agent_memory_consumed | default('0') }}

# Whether Ironic will manage TFTP files for the deploy
# ramdisks. If set to False, you will need to configure your
# own TFTP server that allows booting the deploy ramdisks.
# (boolean value)
manage_agent_boot={{ ironic_agent_manage_boot | ternary('true','false') }}

# Maximum interval (in seconds) for agent heartbeats. (integer value)
#heartbeat_timeout=300

# API version to use for communicating with the ramdisk agent.
# (string value)
agent_api_version={{ ironic_agent_api_version | default('v1') }}


[ipmi]
### Options defined in ironic.drivers.modules.ipminative

# Maximum time in seconds to retry IPMI operations. There is a
# tradeoff when setting this value. Setting this too low may
# cause older BMCs to crash and require a hard reset. However,
# setting too high can cause the sync power state periodic
# task to hang when there are slow or unresponsive BMCs.
# (integer value)
retry_timeout={{ ironic_ipmi_retry_timeout | default('60') }}

# Minimum time, in seconds, between IPMI operations sent to a
# server. There is a risk with some hardware that setting this
# too low may cause the BMC to crash. Recommended setting is 5
# seconds. (integer value)
min_command_interval={{ ironic_ipmi_min_command_interval | default('5') }}


[drac]
# Options defined in ironic.drivers.modules.drac.client

# In case there is a communication failure, the DRAC client
# resends the request as many times as defined in this
# setting. (integer value)
#client_retry_count=5

# In case there is a communication failure, the DRAC client
# waits for as many seconds as defined in this setting before
# resending the request. (integer value)
#client_retry_delay=5


[pxe]
### Options defined in ironic.drivers.modules.iscsi_deploy

# Additional append parameters for baremetal PXE boot. (string value)
pxe_append_params={{ ironic_pxe_append_params | join(' ') }}

# Default file system format for ephemeral partition, if one
# is created. (string value)
default_ephemeral_format={{ ironic_pxe_default_ephemeral_format | default('ext4') }}

# On the ironic-conductor node, directory where images are
# stored on disk. (string value)
images_path={{ ironic_pxe_images_path | default('/var/lib/ironic/images') }}

# On the ironic-conductor node, directory where master
# instance images are stored on disk. (string value)
instance_master_path={{ ironic_pxe_instance_master_path | default('/var/lib/ironic/master_images') }}

# Maximum size (in MiB) of cache for master images, including
# those in use. (integer value)
image_cache_size={{ ironic_pxe_image_cache_size | default('20480') }}

# Maximum TTL (in minutes) for old master images in cache. (integer value)
image_cache_ttl=10080

# The disk devices to scan while doing the deploy. (string value)
disk_devices={{ ironic_pxe_disk_devices | join(',') }}

### Options defined in ironic.drivers.modules.pxe

{% if ironic_pxe_config_template is defined and not ironic_pxe_config_template is none -%}
# On ironic-conductor node, template file for PXE
# configuration. (string value)
# $pybasedir/drivers/modules/pxe_config.template
pxe_config_template={{ ironic_state_path }}/{{ ironic_pxe_config_template | basename }}
{% endif %}

{% if ironic_pxe_uefi_pxe_config_template is defined and not ironic_pxe_uefi_pxe_config_template is none -%}
# On ironic-conductor node, template file for PXE
# configuration for UEFI boot loader. (string value)
# $pybasedir/drivers/modules/elilo_efi_pxe_config.template
uefi_pxe_config_template={{ ironic_state_path }}/{{ ironic_pxe_uefi_pxe_config_template | basename }}
{% endif %}

# IP address of ironic-conductor node's TFTP server. (string value)
tftp_server={{ ironic_pxe_tftp_server | default('$my_ip') }}

# ironic-conductor node's TFTP root path. (string value)
tftp_root={{ ironic_pxe_tftp_root | default('/tftpboot') }}

# On ironic-conductor node, directory where master TFTP images
# are stored on disk. (string value)
tftp_master_path={{ ironic_pxe_tftp_master_path | default('/tftpboot/master_images') }}

# Bootfile DHCP parameter. (string value)
pxe_bootfile_name={{ ironic_pxe_bootfile_name | default('pxelinux.0') }}

# Bootfile DHCP parameter for UEFI boot mode. (string value)
uefi_pxe_bootfile_name={{ ironic_pxe_uefi_pxe_bootfile_name | default('elilo.efi') }}

# Enable iPXE boot. (boolean value)
{% if ironic_ipxe is defined and ironic_ipxe -%}
ipxe_enabled=true

{% if ironic_pxe_ipxe_boot_script is defined and not ironic_pxe_ipxe_boot_script is none -%}
# On ironic-conductor node, the path to the main iPXE script file. (string value)
# $pybasedir/drivers/modules/boot.ipxe
ipxe_boot_script={{ ironic_state_path }}/{{ ironic_pxe_ipxe_boot_script | basename }}
{% endif %}
{% else %}
ipxe_enabled=false
{% endif %}

# The IP version that will be used for PXE booting. Can be
# either 4 or 6. Defaults to 4. EXPERIMENTAL (integer value)
#ip_version=4


[ilo]
### Options defined in ironic.drivers.modules.ilo.common

# Timeout (in seconds) for iLO operations (integer value)
#client_timeout=60

# Port to be used for iLO operations (integer value)
#client_port=443

{% if ironic_ilo_swift_ilo_container is defined and not ironic_ilo_swift_ilo_container is none -%}
# The Swift iLO container to store data. (string value)
#swift_ilo_container=ironic_ilo_container 
swift_ilo_container={{ ironic_ilo_swift_ilo_container }}
{% endif %}

# Amount of time in seconds for Swift objects to auto-expire.
# (integer value)
#swift_object_expiry_timeout=900

# Set this to True to use http web server to host floppy
# images and generated boot ISO. This requires http_root and
# http_url to be configured in the [deploy] section of the
# config file. If this is set to False, then Ironic will use
# Swift to host the floppy images and generated boot_iso.
# (boolean value)
{% if ironic_deploy_http_url is defined and not ironic_deploy_http_url is none -%}
use_web_server_for_images=true
{% else %}
use_web_server_for_images=false
{% endif %}

### Options defined in ironic.drivers.modules.ilo.deploy

{% if ironic_deploy_erase_devices_priority is defined and not ironic_deploy_erase_devices_priority is none -%}
# Priority for erase devices clean step. If unset, it defaults
# to 10. If set to 0, the step will be disabled and will not 
# run during cleaning. (integer value)
clean_priority_erase_devices={{ ironic_deploy_erase_devices_priority }}
{% else %}
clean_priority_erase_devices={{ ironic_ilo_clean_priority_erase_devices | default('10') }}
{% endif %}

### Options defined in ironic.drivers.modules.ilo.management

# Priority for reset_ilo clean step. (integer value)
clean_priority_reset_ilo={{ ironic_ilo_clean_priority_reset_ilo | default('1') }}

# Priority for reset_bios_to_default clean step. (integer
# value)
#clean_priority_reset_bios_to_default=10

# Priority for reset_secure_boot_keys clean step. This step
# will reset the secure boot keys to manufacturing  defaults.
# (integer value)
#clean_priority_reset_secure_boot_keys_to_default=20

# Priority for clear_secure_boot_keys clean step. This step is
# not enabled by default. It can be enabled to to clear all
# secure boot keys enrolled with iLO. (integer value)
#clean_priority_clear_secure_boot_keys=0

# Priority for reset_ilo_credential clean step. This step
# requires "ilo_change_password" parameter to be updated in
# nodes's driver_info with the new password. (integer value)
#clean_priority_reset_ilo_credential=30

## Options defined in ironic.drivers.modules.ilo.power

# Number of times a power operation needs to be retried
# (integer value)
#power_retry=6

# Amount of time in seconds to wait in between power
# operations (integer value)
#power_wait=2


[amt]
### Options defined in ironic.drivers.modules.amt.common

# Protocol used for AMT endpoint, support http/https (string
# value)
#protocol=http

# Maximum number of times to attempt an AMT operation, before
# failing (integer value)
#max_attempts=3

# Amount of time (in seconds) to wait, before retrying an AMT
# operation (integer value)
#action_wait=10


[seamicro]
### Options defined in ironic.drivers.modules.seamicro

# Maximum retries for SeaMicro operations (integer value)
#max_retry=3

# Seconds to wait for power action to be completed (integer
# value)
#action_timeout=10


[snmp]
### Options defined in ironic.drivers.modules.snmp

# Seconds to wait for power action to be completed (integer
# value)
#power_timeout=10


[ssh]
### Options defined in ironic.drivers.modules.ssh

# libvirt URI (string value)
#libvirt_uri=qemu:///system

# Number of attempts to try to get VM name used by the host
# that corresponds to a node's MAC address. (integer value)
#get_vm_name_attempts=3

# Number of seconds to wait between attempts to get VM name
# used by the host that corresponds to a node's MAC address.
# (integer value)
#get_vm_name_retry_interval=3


[virtualbox]
### Options defined in ironic.drivers.modules.virtualbox

# Port on which VirtualBox web service is listening. (integer
# value)
#port=18083

