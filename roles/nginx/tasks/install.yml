---
# Debian repository
- block:
  - name: Debian - Import repository key
    apt_key:
      url: "{{ nginx_os_repo_key }}"
      state: present
    when: nginx_os_repo_key and nginx_os_repo_key | search("http://.*")
    ignore_errors: yes

  - name: Debian - Add repository package
    apt:
      name: "{{ nginx_os_repo_key }}"
      state: latest
    when: nginx_os_repo_key and not nginx_os_repo_key | search("http://.*")

  - name: Debian - Add repository url
    apt_repository:
      repo: "{{ nginx_os_repo_url }}"
      state: present

  when: ansible_os_family == 'Debian' and not nginx_os_packages
  tags: ["debian", "repository"]


# RedHat repository
- block:
   - name: RedHat - Add repository url
     yum:
       name: "{{ nginx_os_repo_url }}"
       state: present
     when: nginx_os_repo_url | match(".*\.rpm$")

   - name: RedHat - Import repository key
     rpm_key:
       key: "{{ nginx_os_repo_key }}"
       state: present
     when: nginx_os_repo_key is not none

   - name: RedHat - Add repository url
     yum_repository:
       name: nginx
       baseurl: "{{ nginx_os_repo_url }}"
       description: Nginx
     when: not nginx_os_repo_url | match(".*\.rpm$")

  when: ansible_os_family == 'RedHat' and not nginx_os_packages
  tags: ["redhat", "repository"]


- name: RedHat - Install required packages
  yum:
    name: "{{ item.key if ('version' not in item.value) else ('%s-%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    update_cache: "{{ nginx_packages_update_cache | ternary('yes', 'no') }}"
  with_dict: "{{ nginx_packages }}"
  when: ansible_os_family == 'RedHat'
  register: __nginx_installed_rh
  tags: ["redhat", "packages"]

- name: Debian - Install required packages
  apt: 
    name: "{{ item.key if ('version' not in item.value) else ('%s=%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    install_recommends: "{{ nginx_packages_install_recommends }}"
    update_cache: "{{ nginx_packages_update_cache | ternary('yes', 'no') }}"
    cache_valid_time: "{{ nginx_packages_update_cache }}"
  with_dict: "{{ nginx_packages }}"
  when: ansible_os_family == 'Debian'
  register: __nginx_installed_debian
  tags: ["debian", "packages"]

- name: Check if packages were installed
  set_fact:
    _nginx_reinstalled: "{{ __nginx_installed_rh.changed or __nginx_installed_debian.changed }}"

- name: Ensure nginx is stopped after initial install
  service:
    name: "{{ nginx_daemon }}"
    state: stopped
    enabled: no
  ignore_errors: yes
  when: _nginx_reinstalled

