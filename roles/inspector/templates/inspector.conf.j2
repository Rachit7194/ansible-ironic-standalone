# {{ ansible_managed }}
# /etc/ironic-inspector/inspector.conf

[DEFAULT]
# IP to listen on. (string value)
# Deprecated group/name - [discoverd]/listen_address
listen_address={{ ironic_inspector_listen_address | default('0.0.0.0') }}

# Port to listen on. (integer value)
# Deprecated group/name - [discoverd]/listen_port
listen_port={{ ironic_inspector_listen_port | default('5050') }}

# Authentication method used on the ironic-inspector API. Either
# "noauth" or "keystone" are currently valid options. "noauth" will
# disable all authentication. (string value)
# Allowed values: keystone, noauth
{% if ironic_inspector_keystone_authtoken_auth_uri is defined and not ironic_inspector_keystone_authtoken_auth_uri is none -%}
# Method to use for authentication: noauth or keystone. (string value)
# Allowed values: keystone, noauth
auth_strategy=keystone
{% else %}
auth_strategy=noauth
{% endif %}

# Timeout after which introspection is considered failed, set to 0 to
# disable. (integer value)
# Deprecated group/name - [discoverd]/timeout
timeout={{ ironic_inspector_timeout | default('3600') }}

# For how much time (in seconds) to keep status information about
# nodes after introspection was finished for them. Default value is 1
# week. (integer value)
# Deprecated group/name - [discoverd]/node_status_keep_time
node_status_keep_time={{ ironic_inspector_node_status_keep_time | default('604800') }}

# Amount of time in seconds, after which repeat clean up of timed out
# nodes and old nodes status information. (integer value)
# Deprecated group/name - [discoverd]/clean_up_period
clean_up_period={{ ironic_inspector_clean_up_period | default('60') }}

# SSL Enabled/Disabled (boolean value)
#use_ssl = false

# Path to SSL certificate (string value)
#ssl_cert_path =

# Path to SSL key (string value)
#ssl_key_path =

# The green thread pool size. (integer value)
max_concurrency={{ ironic_inspector_max_concurrency | default('1000') }}

# Delay (in seconds) between two introspections. (integer value)
introspection_delay={{ ironic_inspector_introspection_delay | default('5') }}

# Only node with drivers matching this regular expression will be
# affected by introspection_delay setting. (string value)
#introspection_delay_drivers = ^.*_ssh$

# Ironic driver_info fields that are equivalent to ipmi_address. (list value)
#ipmi_address_fields = ilo_address,drac_host,cimc_address

# Path to the rootwrap configuration file to use for running commands
# as root (string value)
rootwrap_config = /etc/ironic-inspector/rootwrap.conf

# Limit the number of elements an API list-call returns (integer value)
# Minimum value: 1
#api_max_limit = 1000

# Print debugging output (set logging level to DEBUG instead of
# default INFO level). (boolean value)
debug={{ ironic_inspector_debug | ternary('true','false') }}

# The name of a logging configuration file. This file is appended to
# any existing logging configuration files. For details about logging
# configuration files, see the Python logging module documentation.
# (string value)
# Deprecated group/name - [DEFAULT]/log_config
#log_config_append = <None>

# Format string for %%(asctime)s in log records. Default: %(default)s. (string value)
#log_date_format = %Y-%m-%d %H:%M:%S

{% if ironic_inspector_log is defined %}
{% if ironic_inspector_log == 'syslog' %}
# Use syslog for logging. Existing syslog format is DEPRECATED
# during I, and will change in J to honor RFC5424. (boolean value)
use_syslog=true

# (Optional) Enables or disables syslog rfc5424 format for
# logging. If enabled, prefixes the MSG part of the syslog
# message with APP-NAME (RFC5424). The format without the APP-
# NAME is deprecated in I, and will be removed in J. (boolean value)
use_syslog_rfc_format=true

# Syslog facility to receive log lines. (string value)
syslog_log_facility=LOG_USER
{% else %}
# (Optional) Name of log file to output to. If no default is
# set, logging will go to stdout. (string value)
# Deprecated group/name - [DEFAULT]/logfile
log_file={{ ironic_inspector_log | basename }}

# (Optional) The base directory used for relative --log-file
# paths. (string value)
# Deprecated group/name - [DEFAULT]/logdir
log_dir={{ ironic_inspector_log | dirname }}
{% endif %}
{% else %}
# Log output to standard error. (boolean value)
use_stderr=true
{% endif %}

# Uses logging handler designed to watch file system. When log file is
# moved or removed this handler will open a new log file with
# specified path instantaneously. It makes sense only if log_file
# option is specified and Linux platform is used. This option is
# ignored if log_config_append is set. (boolean value)
watch_log_file={{ ironic_inspector_watch_log_file | ternary('true','false') }}

# Format string to use for log messages with context. (string value)
logging_context_format_string=%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s

# Format string to use for log messages without context. (string value)
logging_default_format_string=%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s

# Data to append to log format when level is DEBUG. (string value)
logging_debug_format_suffix=%(funcName)s %(pathname)s:%(lineno)d

# Prefix each line of exception output with this format. (string value)
logging_exception_prefix=%(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s

# Defines the format string for %(user_identity)s that is used in
# logging_context_format_string. (string value)
#logging_user_identity_format = %(user)s %(tenant)s %(domain)s %(user_domain)s %(project_domain)s

# List of logger=LEVEL pairs. (list value)
#default_log_levels = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,oslo.messaging=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN,urllib3.connectionpool=WARN,websocket=WARN,requests.packages.urllib3.util.retry=WARN,urllib3.util.retry=WARN,keystonemiddleware=WARN,routes.middleware=WARN,stevedore=WARN,taskflow=WARN,keystoneauth=WARN,oslo.cache=INFO,dogpile.core.dogpile=INFO

# Enables or disables publication of error events. (boolean value)
publish_errors={{ ironic_inspector_publish_errors | default(true) | ternary('true','false') }}

# The format for an instance that is passed with the log message.
# (string value)
#instance_format = "[instance: %(uuid)s] "

# The format for an instance UUID that is passed with the log message.
# (string value)
#instance_uuid_format = "[instance: %(uuid)s] "

# Enables or disables fatal status of deprecations. (boolean value)
fatal_deprecations={{ ironic_inspector_fatal_deprecations | default(false) | ternary('true','false') }}



[capabilities]
# Whether to store the boot mode (BIOS or UEFI). (boolean value)
boot_mode={{ ironic_inspector_capabilities_boot_mode | default(false) | ternary('true','false') }}

# Mapping between a CPU flag and a capability to set if this flag is
# present. (dict value)
#cpu_flags = aes:cpu_aes,pdpe1gb:cpu_hugepages_1g,pse:cpu_hugepages,smx:cpu_txt,svm:cpu_vt,vmx:cpu_vt



[cors]
# Indicate whether this resource may be shared with the domain
# received in the requests "origin" header. (string value)
#allowed_origin=
{% if ironic_inspector_cors_allowed_origin is defined and not ironic_inspector_cors_allowed_origin is none -%}
allowed_origin={{ ironic_inspector_cors_allowed_origin }}
{% endif %}

# Indicate that the actual request can include user
# credentials (boolean value)
allow_credentials={{ ironic_inspector_cors_allow_credentials | default(True) | ternary('true','false') }}

# Indicate which headers are safe to expose to the API.
# Defaults to HTTP Simple Headers. (list value)
#expose_headers=Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma
{% if ironic_cors_expose_headers is defined -%}
expose_headers={{ ironic_inspector_cors_expose_headers | join(',') }}
{% endif %}

# Maximum cache age of CORS preflight requests. (integer value)
max_age={{ ironic_inspector_cors_max_age | default('3600') }}

# Indicate which methods can be used during the actual request. (list value)
#allow_methods = GET,POST,PUT,HEAD,PATCH,DELETE,OPTIONS
{% if ironic_inspector_cors_allow_methods is defined -%}
allow_methods={{ ironic_inspector_cors_allow_methods | join(',') }}
{% endif %}

# Indicate which header field names may be used during the
# actual request. (list value)
#allow_headers = X-Auth-Token,X-OpenStack-Ironic-Inspector-API-Minimum-Version,X-OpenStack-Ironic-Inspector-API-Maximum-Version,X-OpenStack-Ironic-Inspector-API-Version
{% if ironic_inspector_cors_allow_headers is defined -%}
allow_headers={{ ironic_inspector_cors_allow_headers | join(',') }}
{% endif %}



### [cors.subdomain]
{% if ironic_inspector_cors_domains is defined -%}
{% for (key, values) in ironic_inspector_cors_domains.iteritems() %}
[cors.{{ key }}]
{% if values["allowed_origin"] is defined -%}
allowed_origin={{ values["allowed_origin"] }}
{% endif %}

{%- if values["allow_credentials"] is defined -%}
allow_credentials={{ values["allow_credentials"] | ternary('true','false') }}
{% endif %}

{%- if values["expose_headers"] is defined -%}
expose_headers={{ values["expose_headers"] | join(',') }}
{% endif %}

{%- if values["max_age"] is defined -%}
max_age={{ values["max_age"] | default('3600') }}
{% endif %}

{%- if values["allow_methods"] is defined -%}
allow_methods={{ values["allow_methods"] | join(',') }}
{% endif %}

{%- if values["allow_headers"] is defined -%}
allow_headers={{ values["allow_headers"] | join(',') }}
{% endif %}

{% endfor %}
{% endif %}



[database]
# The back end to use for the database. (string value)
# Deprecated group/name - [DEFAULT]/db_backend
backend=sqlalchemy

# The SQLAlchemy connection string to use to connect to the
# database. (string value)
{% if ironic_inspector_database_connection is defined and ironic_inspector_database_connection | match("mysql://.*") -%}
connection="{{ ironic_inspector_database_connection }}"
{% else %}
{% if not ironic_inspector_database_connection is defined -%}
{% set ironic_inspector_database_connection="sqlite:///var/lib/ironic/inspector.db" %}
{% endif %}
connection="{{ ironic_inspector_database_connection }}"

# The file name to use with SQLite. (string value)
sqlite_db={{ ironic_inspector_database_connection | basename }}

# If True, SQLite uses synchronous mode. (boolean value)
sqlite_synchronous=true
{% endif %}

# The SQLAlchemy connection string to use to connect to the slave
# database. (string value)
#slave_connection = <None>

# The SQL mode to be used for MySQL sessions. This option, including
# the default, overrides any server-set SQL mode. To use whatever SQL
# mode is set by the server configuration, set this to no value.
# Example: mysql_sql_mode= (string value)
#mysql_sql_mode = TRADITIONAL

# Timeout before idle SQL connections are reaped. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_idle_timeout
# Deprecated group/name - [DATABASE]/sql_idle_timeout
# Deprecated group/name - [sql]/idle_timeout
idle_timeout={{ ironic_inspector_database_idle_timeout | default('600') }}

# Minimum number of SQL connections to keep open in a pool. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_min_pool_size
# Deprecated group/name - [DATABASE]/sql_min_pool_size
min_pool_size = 1

# Maximum number of SQL connections to keep open in a pool. (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_pool_size
# Deprecated group/name - [DATABASE]/sql_max_pool_size
max_pool_size={{ ironic_inspector_database_pool_size | default('10') }}

# Maximum number of database connection retries during startup. Set to
# -1 to specify an infinite retry count. (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_retries
# Deprecated group/name - [DATABASE]/sql_max_retries
#max_retries = 10

# Interval between retries of opening a SQL connection. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_retry_interval
# Deprecated group/name - [DATABASE]/reconnect_interval
#retry_interval = 10

# If set, use this value for max_overflow with SQLAlchemy. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_max_overflow
# Deprecated group/name - [DATABASE]/sqlalchemy_max_overflow
#max_overflow = <None>

{% if ironic_inspector_debug and ironic_inspector_trace -%}
# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer value)
# Deprecated group/name - [DEFAULT]/sql_connection_debug
connection_debug=100

# Add Python stack traces to SQL as comment strings. (boolean value)
# Deprecated group/name - [DEFAULT]/sql_connection_trace
connection_trace=true
{% elif ironic_inspector_debug %}
# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer value)
# Deprecated group/name - [DEFAULT]/sql_connection_debug
connection_debug=50

# Add Python stack traces to SQL as comment strings. (boolean value)
# Deprecated group/name - [DEFAULT]/sql_connection_trace
connection_trace=false
{% else %}
# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer value)
# Deprecated group/name - [DEFAULT]/sql_connection_debug
connection_debug=0

# Add Python stack traces to SQL as comment strings. (boolean value)
# Deprecated group/name - [DEFAULT]/sql_connection_trace
connection_trace=false
{% endif %}

{% if ironic_database_pool_timeout is defined and not ironic_database_pool_timeout is none -%}
# If set, use this value for pool_timeout with SQLAlchemy. (integer value)
# Deprecated group/name - [DATABASE]/sqlalchemy_pool_timeout
pool_timeout={{ ironic_inspector_database_pool_timeout }}
{% endif %}

# Enable the experimental use of database reconnect on connection
# lost. (boolean value)
use_db_reconnect={{ ironic_inspector_database_use_db_reconnect | default(false) | ternary('true','false') }}

# Seconds between retries of a database transaction. (integer value)
#db_retry_interval=1

# If True, increases the interval between retries of a database
# operation up to db_max_retry_interval. (boolean value)
#db_inc_retry_interval = true

# If db_inc_retry_interval is set, the maximum seconds between retries
# of a database operation. (integer value)
#db_max_retry_interval = 10

# Maximum retries in case of connection error or deadlock error before
# error is raised. Set to -1 to specify an infinite retry count.
# (integer value)
#db_max_retries = 20



[discovery]
# The name of the Ironic driver used by the enroll hook when creating
# a new node in Ironic. (string value)
enroll_node_driver={{ ironic_inspector_discovery_enroll_driver | default('fake') }}



[firewall]
# Whether to manage firewall rules for PXE port. (boolean value)
# Deprecated group/name - [discoverd]/manage_firewall
manage_firewall={{ ironic_inspector_firewall_manage | default(False) | ternary('true','false') }}

{% if ironic_inspector_firewall_interface is defined and not ironic_inspector_firewall_interface is none -%}
# Interface on which dnsmasq listens, the default is for VM's. (string value)
# Deprecated group/name - [discoverd]/dnsmasq_interface
#dnsmasq_interface = br-ctlplane
dnsmasq_interface={{ ironic_inspector_firewall_interface }}
{% endif %}

# Amount of time in seconds, after which repeat periodic update of
# firewall. (integer value)
# Deprecated group/name - [discoverd]/firewall_update_period
firewall_update_period={{ ironic_inspector_firewall_update_period | default('15') }}

# iptables chain name to use. (string value)
firewall_chain={{ ironic_inspector_firewall_chain | default('ironic-inspector') }}



[ironic]
# Method to use for authentication: noauth or keystone. (string value)
# Allowed values: keystone, noauth
{% if ironic_inspector_keystone_authtoken_auth_uri is defined and not ironic_inspector_keystone_authtoken_auth_uri is none -%}
auth_strategy=keystone
{% else %}
auth_strategy=noauth
{% endif %}

# Ironic API URL, used to set Ironic API URL when auth_strategy option
# is noauth to work with standalone Ironic without keystone. (string value)
ironic_url="{{ ironic_inspector_ironic_api_url | default('http://127.0.0.1:6385/') }}"

# Ironic service type. (string value)
os_service_type={{ ironic_inspector_ironic_os_service_type | default('baremetal') }}

# Ironic endpoint type. (string value)
os_endpoint_type={{ ironic_inspector_ironic_os_endpoint_type | default('internalURL') }}

# Interval between retries in case of conflict error (HTTP 409).
# (integer value)
#retry_interval = 2

# Maximum number of retries in case of conflict error (HTTP 409).
# (integer value)
#max_retries = 30

# Authentication type to load (string value)
#auth_type = <None>

# PEM encoded Certificate Authority to use when verifying
# HTTPs connections. (string value)
#cafile = <None>

# PEM encoded client certificate cert file (string value)
#certfile = <None>

# Optional domain ID to use with v3 and v2 parameters. It will
# be used for both the user and project domain in v3 and
# ignored in v2 authentication. (string value)
#default_domain_id = <None>

# Optional domain name to use with v3 API and v2 parameters.
# It will be used for both the user and project domain in v3
# and ignored in v2 authentication. (string value)
{% if ironic_inspector_ironic_domain_name is defined and ironic_inspector_ironic_domain_name -%}
default_domain_name={{ ironic_inspector_ironic_domain_name }}
{% endif %}

# Domain ID to scope to (string value)
#domain_id = <None>

# Domain name to scope to (string value)
#domain_name = <None>

# Verify HTTPS connections. (boolean value)
#insecure = false

# PEM encoded client certificate key file (string value)
#keyfile = <None>

# Domain ID containing project (string value)
#project_domain_id = <None>

# Domain name containing project (string value)
#project_domain_name = <None>

# Project ID to scope to (string value)
# Deprecated group/name - [glance]/tenant-id
#project_id = <None>

# Project name to scope to (string value)
{% if ironic_inspector_ironic_project_name is defined and ironic_inspector_ironic_project_name -%}
project_name={{ ironic_inspector_ironic_project_name }}
{% endif %}

# Timeout value for http requests (integer value)
#timeout = <None>

# Trust ID (string value)
#trust_id = <None>

# User's domain id (string value)
#user_domain_id = <None>

# User's domain name (string value)
#user_domain_name = <None>

# User id (string value)
#user_id = <None>

# Username (string value)
{% if ironic_inspector_ironic_username is defined and ironic_inspector_ironic_username -%}
username={{ ironic_inspector_ironic_username }}
password={{ ironic_inspector_ironic_password | default('') }}
{% endif %}



[keystone_authtoken]
### From keystonemiddleware.auth_token
{% if ironic_inspector_keystone_authtoken_auth_uri is defined and not ironic_inspector_keystone_authtoken_auth_uri is none -%}

{% if ironic_inspector_keystone_authtoken_region_name is defined -%}
# The region used for getting endpoints of OpenStackservices.
# (string value)
region_name={{ ironic_inspector_keystone_authtoken_region_name }}
{% endif %}

# Complete public Identity API endpoint. (string value)
auth_uri={{ ironic_inspector_keystone_authtoken_auth_uri }}

# API version of the admin Identity API endpoint. (string value)
auth_version={{ ironic_inspector_keystone_authtoken_auth_version | default('2') }}

# Do not handle authorization requests within the middleware,
# but delegate the authorization decision to downstream WSGI
# components. (boolean value)
delay_auth_decision={{ ironic_inspector_keystone_authtoken_delay_auth_decision | default(false) | ternary('true','false') }}

# Request timeout value for communicating with Identity API server. (integer value)
#http_connect_timeout=<None>

# How many times are we trying to reconnect when communicating
# with Identity API Server. (integer value)
#http_request_max_retries=3

# Env key for the swift cache. (string value)
#cache=<None>

# Required if identity server requires client certificate
# (string value)
#certfile=<None>

# Required if identity server requires client certificate
# (string value)
#keyfile=<None>

# A PEM encoded Certificate Authority to use when verifying
# HTTPs connections. Defaults to system CAs. (string value)
#cafile=<None>

# Verify HTTPS connections. (boolean value)
#insecure=false

# Directory used to cache files related to PKI tokens. (string value)
#signing_dir=<None>

# Optionally specify a list of memcached server(s) to use for
# caching. If left undefined, tokens will instead be cached
# in-process. (list value)
# Deprecated group/name - [DEFAULT]/memcache_servers
#memcached_servers=<None>

# In order to prevent excessive effort spent validating
# tokens, the middleware caches previously-seen tokens for a
# configurable duration (in seconds). Set to -1 to disable
# caching completely. (integer value)
#token_cache_time=300

# Determines the frequency at which the list of revoked tokens
# is retrieved from the Identity service (in seconds). A high
# number of revocation events combined with a low cache
# duration may significantly reduce performance. (integer value)
#revocation_cache_time=10

# (Optional) If defined, indicate whether token data should be
# authenticated or authenticated and encrypted. Acceptable
# values are MAC or ENCRYPT.  If MAC, token data is
# authenticated (with HMAC) in the cache. If ENCRYPT, token
# data is encrypted and authenticated in the cache. If the
# value is not one of these options or empty, auth_token will
# raise an exception on initialization. (string value)
#memcache_security_strategy=<None>

# (Optional, mandatory if memcache_security_strategy is
# defined) This string is used for key derivation. (string value)
#memcache_secret_key=<None>

# (Optional) Number of seconds memcached server is considered
# dead before it is tried again. (integer value)
#memcache_pool_dead_retry=300

# (Optional) Maximum total number of open connections to every
# memcached server. (integer value)
#memcache_pool_maxsize=10

# (Optional) Socket timeout in seconds for communicating with
# a memcached server. (integer value)
#memcache_pool_socket_timeout=3

# (Optional) Number of seconds a connection to memcached is
# held unused in the pool before it is closed. (integer value)
#memcache_pool_unused_timeout=60

# (Optional) Number of seconds that an operation will wait to
# get a memcached client connection from the pool. (integer value)
#memcache_pool_conn_get_timeout=10

# (Optional) Use the advanced (eventlet safe) memcached client
# pool. The advanced pool will only work under python 2.x.
# (boolean value)
#memcache_use_advanced_pool=false

# (Optional) Indicate whether to set the X-Service-Catalog
# header. If False, middleware will not ask for service
# catalog on token validation and will not set the X-Service-
# Catalog header. (boolean value)
#include_service_catalog=true

# Used to control the use and type of token binding. Can be
# set to: "disabled" to not check token binding. "permissive"
# (default) to validate binding information if the bind type
# is of a form known to the server and ignore it if not.
# "strict" like "permissive" but if the bind type is unknown
# the token will be rejected. "required" any form of token
# binding is needed to be allowed. Finally the name of a
# binding method that must be present in tokens. (string value)
#enforce_token_bind=permissive

# If true, the revocation list will be checked for cached
# tokens. This requires that PKI tokens are configured on the
# identity server. (boolean value)
#check_revocations_for_cached=false

# Hash algorithms to use for hashing PKI tokens. This may be a
# single algorithm or multiple. The algorithms are those
# supported by Python standard hashlib.new(). The hashes will
# be tried in the order given, so put the preferred one first
# for performance. The result of the first hash will be stored
# in the cache. This will typically be set to multiple values
# only while migrating from a less secure algorithm to a more
# secure one. Once all the old tokens are expired this option
# should be set to a single value for better performance.
# (list value)
#hash_algorithms=md5


# Authentication type to load (string value)
# Deprecated group/name - [keystone_authtoken]/auth_plugin
#auth_type = <None>

# Config Section from which to load plugin specific options (string value)
#auth_section = <None>

{% endif %}



[pci_devices]
# An alias for PCI device identified by 'vendor_id' and 'product_id'
# fields. Format: {"vendor_id": "1234", "product_id": "5678", "name":
# "pci_dev1"} (multi valued)
#alias =



[processing]
# Which MAC addresses to add as ports during introspection. Possible
# values: all (all MAC addresses), active (MAC addresses of NIC with
# IP addresses), pxe (only MAC address of NIC node PXE booted from,
# falls back to "active" if PXE MAC is not supplied by the ramdisk).
# (string value)
# Allowed values: all, active, pxe
# Deprecated group/name - [discoverd]/add_ports
add_ports={{ ironic_inspector_processing_add_ports | default('pxe') }}

# Which ports (already present on a node) to keep after introspection.
# Possible values: all (do not delete anything), present (keep ports
# which MACs were present in introspection data), added (keep only
# MACs that we added during introspection). (string value)
# Allowed values: all, present, added
# Deprecated group/name - [discoverd]/keep_ports
keep_ports={{ ironic_inspector_processing_keep_ports | default('all') }}

# Whether to overwrite existing values in node database. Disable this
# option to make introspection a non-destructive operation. (boolean value)
# Deprecated group/name - [discoverd]/overwrite_existing
overwrite_existing={{ ironic_inspector_processing_overwrite_existing | default(True) | ternary('true','false') }}

# Whether to enable setting IPMI credentials during introspection.
# This is an experimental and not well tested feature, use at your own
# risk. (boolean value)
# Deprecated group/name - [discoverd]/enable_setting_ipmi_credentials
enable_setting_ipmi_credentials={{ ironic_inspector_processing_enable_setting_ipmi_credentials | default(False) | ternary('true','false') }}

{% if ironic_inspector_processing_default_processing_hooks is defined and not ironic_inspector_processing_default_processing_hooks is none -%}
# Comma-separated list of default hooks for processing pipeline. Hook
# 'scheduler' updates the node with the minimum properties required by
# the Nova scheduler. Hook 'validate_interfaces' ensures that valid
# NIC data was provided by the ramdisk.Do not exclude these two unless
# you really know what you're doing. (string value)
#default_processing_hooks = ramdisk_error,root_disk_selection,scheduler,validate_interfaces,capabilities,pci_devices
default_processing_hooks={{ ironic_inspector_processing_default_processing_hooks | join(',') }}
{% endif %}

{% if ironic_inspector_processing_processing_hooks is defined and not ironic_inspector_processing_processing_hooks is none -%}
# Comma-separated list of enabled hooks for processing pipeline. The
# default for this is $default_processing_hooks, hooks can be added
# before or after the defaults like this:
# "prehook,$default_processing_hooks,posthook". (string value)
# Deprecated group/name - [discoverd]/processing_hooks
processing_hooks={{ ironic_inspector_processing_processing_hooks | join(',') }}
{% endif %}

{% if ironic_inspector_processing_ramdisk_logs_dir is defined and not ironic_inspector_processing_ramdisk_logs_dir is none -%}
# If set, logs from ramdisk will be stored in this directory. (string value)
# Deprecated group/name - [discoverd]/ramdisk_logs_dir
ramdisk_logs_dir={{ ironic_inspector_processing_ramdisk_logs_dir }}

# Whether to store ramdisk logs even if it did not return an error
# message (dependent upon "ramdisk_logs_dir" option being set).
# (boolean value)
# Deprecated group/name - [discoverd]/always_store_ramdisk_logs
always_store_ramdisk_logs={{ ironic_inspector_processing_always_store_ramdisk_logs | default(false) | ternary('true','false') }}
{% endif %}

{% if ironic_inspector_discovery_enroll and ironic_inspector_processing_node_not_found_hook is not none -%}
# The name of the hook to run when inspector receives inspection
# information from a node it isn't already aware of. This hook is
# ignored by default. (string value)
node_not_found_hook={{ ironic_inspector_processing_node_not_found_hook }}
{% endif %}

# Method for storing introspection data. If set to 'none',
# introspection data will not be stored. (string value)
# Allowed values: none, swift
{% if ironic_inspector_swift_auth_url is defined and not ironic_inspector_swift_auth_url is none -%}
store_data=swift
{% else %}
store_data=none
{% endif %}

# Name of the key to store the location of stored data in the extra
# column of the Ironic database. (string value)
store_data_location={{ ironic_inspector_processing_store_data_location | default('inspection') }}

# Whether to leave 1 GiB of disk size untouched for partitioning. Only
# has effect when used with the IPA as a ramdisk, for older ramdisk
# local_gb is calculated on the ramdisk side. (boolean value)
disk_partitioning_spacing={{ ironic_inspector_processing_disk_partitioning_spacing | default(True) | ternary('true','false') }}

# Whether to log node BMC address with every message during
# processing. (boolean value)
log_bmc_address={{ ironic_inspector_processing_log_bmc_address | default(True) | ternary('true','false') }}

# File name template for storing ramdisk logs. The following
# replacements can be used: {uuid} - node UUID or "unknown", {bmc} -
# node BMC address or "unknown", {dt} - current UTC date and time,
# {mac} - PXE booting MAC or "unknown". (string value)
#ramdisk_logs_filename_format = {uuid}_{dt:%Y%m%d-%H%M%S.%f}.tar.gz

# Whether to power off a node after introspection. (boolean value)
power_off={{ ironic_inspector_processing_power_off | default(True) | ternary('true','false') }}


[swift]
# Maximum number of times to retry a Swift request, before failing.
# (integer value)
#max_retries = 2

# Number of seconds that the Swift object will last before being
# deleted. (set to 0 to never delete the object). (integer value)
delete_after={{ ironic_inspector_swift_delete_after | default('0') }}

# Default Swift container to use when creating objects. (string value)
container={{ ironic_inspector_swift_container | default('ironic-inspector') }}

# Complete public Identity API endpoint. (string value)
{% if ironic_inspector_swift_auth_url is defined and ironic_inspector_swift_auth_url -%}
auth_url={{ ironic_inspector_swift_auth_url }}
{% endif %}

# Authentication type to load (string value)
#auth_type = <None>

# PEM encoded Certificate Authority to use when verifying
# HTTPs connections. (string value)
#cafile = <None>

# PEM encoded client certificate cert file (string value)
#certfile = <None>

# Optional domain ID to use with v3 and v2 parameters. It will
# be used for both the user and project domain in v3 and
# ignored in v2 authentication. (string value)
#default_domain_id = <None>

# Optional domain name to use with v3 API and v2 parameters.
# It will be used for both the user and project domain in v3
# and ignored in v2 authentication. (string value)
{% if ironic_inspector_swift_domain_name is defined and ironic_inspector_swift_domain_name -%}
default_domain_name={{ ironic_inspector_swift_domain_name }}
{% endif %}

# Domain ID to scope to (string value)
#domain_id = <None>

# Domain name to scope to (string value)
#domain_name = <None>

# Verify HTTPS connections. (boolean value)
#insecure = false

# PEM encoded client certificate key file (string value)
#keyfile = <None>

# Domain ID containing project (string value)
#project_domain_id = <None>

# Domain name containing project (string value)
#project_domain_name = <None>

# Project ID to scope to (string value)
# Deprecated group/name - [glance]/tenant-id
#project_id = <None>

# Project name to scope to (string value)
{% if ironic_inspector_swift_project_name is defined and ironic_inspector_swift_project_name -%}
project_name={{ ironic_inspector_swift_project_name }}
{% endif %}

# Timeout value for http requests (integer value)
#timeout = <None>

# Trust ID (string value)
#trust_id = <None>

# User's domain id (string value)
#user_domain_id = <None>

# User's domain name (string value)
#user_domain_name = <None>

# User id (string value)
#user_id = <None>

# Username (string value)
{% if ironic_inspector_swift_username is defined and ironic_inspector_swift_username -%}
username={{ ironic_inspector_swift_username }}
password={{ ironic_inspector_swift_password | default('') }}
{% endif %}


