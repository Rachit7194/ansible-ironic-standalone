---
# Debian repository
- block:
  - name: Debian - Import repository key
    apt_key:
      url: "{{ mysql_os_repo_key }}"
      state: present
    when: mysql_os_repo_key and mysql_os_repo_key | search("http://.*")
    ignore_errors: yes

  - name: Debian - Add repository package
    apt:
      name: "{{ mysql_os_repo_key }}"
      state: latest
    when: mysql_os_repo_key and not mysql_os_repo_key | search("http://.*")

  - name: Debian - Add repository url
    apt_repository:
      repo: "{{ mysql_os_repo_url }}"
      state: present

  when: ansible_os_family == 'Debian' and not mysql_os_packages
  tags: ["debian", "repository"]


# RedHat repository
- block:
  - name: RedHat - Add repository url
    yum:
      name: "{{ mysql_os_repo_url }}"
      state: present

  - name: RedHat - Import repository key
    rpm_key:
      key: "{{ mysql_os_repo_key }}"
      state: present
    when: mysql_os_repo_key is not none

  when: ansible_os_family == 'RedHat' and not mysql_os_packages
  tags: ["redhat", "repository"]


- name: Check if pidfile exists
  stat:
    path: "{{ mysql_pidfile }}"
  register: __mysql_pidfile

- name: Setup previous installed fact
  set_fact:
    _mysql_previous: "{{ __mysql_pidfile.stat.exists }}"

- name: "RedHat - Install required packages for mysql {{ mysql_version }}"
  yum:
    name: "{{ item.key if ('version' not in item.value) else ('%s-%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    update_cache: "{{ mysql_packages_update_cache | ternary('yes', 'no') }}"
    enablerepo: "{{ mysql_os_repo }}"
  with_dict: "{{ mysql_packages_dict }}"
  when: ansible_os_family == 'RedHat'
  register: __mysql_installed_rh
  tags: ["redhat", "packages"]

- name: "Debian - Install required packages for mysql {{ mysql_version }}"
  apt: 
    name: "{{ item.key if ('version' not in item.value) else ('%s=%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    install_recommends: "{{ mysql_packages_install_recommends }}"
    update_cache: "{{ mysql_packages_update_cache | ternary('yes', 'no') }}"
    cache_valid_time: "{{ mysql_packages_update_cache }}"
  with_dict: "{{ mysql_packages_dict }}"
  when: ansible_os_family == 'Debian'
  register: __mysql_installed_debian
  tags: ["debian", "packages"]

- name: Check if packages were installed
  set_fact:
    _mysql_reinstalled: "{{ __mysql_installed_rh.changed or __mysql_installed_debian.changed }}"

# Because Debian/Ubuntu starts MySQL as part of the install process, 
# we need to stop mysql and remove the logfiles in case the user set a 
# custom log file size.
- name: Ensure MySQL is stopped after initial install
  service:
    name: "{{ mysql_daemon }}"
    state: stopped
    enabled: no
  ignore_errors: yes
  when: _mysql_reinstalled


- block:
  - name: Create custom systemd folder configuration
    file:
      path: "/etc/systemd/system/{{ mysql_daemon }}.service.d"
      state: directory
      mode: 0755

  - name: Define custom systemd properties
    template:
      src: systemd.conf.j2
      dest: "/etc/systemd/system/{{ mysql_daemon }}.service.d/service.conf"
      mode: 0644
    register: __mysql_systemd

  - name: Create pid folder
    file:
      path: "{{ mysql_pidfile | dirname }}"
      owner: "{{ mysql_user }}"
      group: "{{ mysql_group }}"
      mode: 0755
      state: directory

  - name: Reload systemd
    command: systemctl daemon-reload
    when: __mysql_systemd|changed

  tags: ["systemd", "init"]

