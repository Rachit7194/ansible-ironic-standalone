---
# MySQL community on Centos autogenerates a password for root
- name: Check MySQL connectivity
  shell: mysql -NBe 'SELECT 1' || true
  register: __mysql_check
  changed_when: False

- name: "Initialize local host list for the {{ mysql_root_username }} user"
  set_fact:
    _mysql_root_hosts: "[ 'localhost' ]"


- block:
  # localhost needs to be last for idempotency
  - name: "Get list of local hosts defined for the {{ mysql_root_username }} user"
    command: "mysql -NBe \"SELECT Host FROM mysql.user WHERE User='{{ mysql_root_username }}' ORDER BY (Host='localhost') ASC\""
    register: __mysql_root_hosts
    changed_when: False

  - name: "Define list of hosts for the {{ mysql_root_username }} user"
    set_fact:
      _mysql_root_hosts: "{{ __mysql_root_hosts.stdout_lines }}"

  - name: "Update MySQL password for local {{ mysql_root_username }} account"
    mysql_user:
      name: "{{ mysql_root_username }}"
      host: "{{ item }}"
      password: "{{ mysql_root_password }}"
      update_password: always
      check_implicit_admin: yes
      login_unix_socket: "{{ mysql_socket }}"
    with_items: "{{ _mysql_root_hosts }}"
    changed_when: False

  when: __mysql_check.stdout | trim == "1"


# With MySQL 5.7 (latest version on Centos 7) when installed for first time,
# a temporary password which appears in the log file is created, such password
# is already expired, so a special client capabable of connecting with expired
# passwords is needed
# https://dev.mysql.com/doc/refman/5.7/en/password-expiration-sandbox-mode.html
- block:
  - name: "Get mysql generated password for {{ mysql_root_username }}"
    command: "awk '/temporary password is generated for {{ mysql_root_username }}/{ split($(NF-1),h,\"@\"); print h[2] $NF}' {{ mysql_log_error }}"
    register: __mysql_root_settings
    changed_when: False

  - name: "Define host for the {{ mysql_root_username }} user"
    set_fact:
      _mysql_root_host: "{{ [ __mysql_root_settings.stdout_lines[0].split(':', 1) | first ] }}"

  - name: "Get the autogenerated password for {{ mysql_root_username }} user"
    set_fact:
      _mysql_root_password: "{{ __mysql_root_settings.stdout_lines[0].split(':', 1) | last }}"

  - name: "Update MySQL password for local {{ mysql_root_username }} account"
    shell: >
        mysql -NB --connect-expired-password
        --socket="{{ mysql_socket }}"
        --user="{{ mysql_root_username }}"
        --password="{{_mysql_root_password }}"
        --execute="
            SET GLOBAL validate_password_policy='{{ mysql_validate_password_policy }}';
            SET GLOBAL validate_password_length={{ mysql_validate_password_length }};
            ALTER USER '{{ mysql_root_username }}'@'{{ item }}' IDENTIFIED BY '{{ mysql_root_password }}';
            FLUSH PRIVILEGES;
        "
    with_items: "{{ _mysql_root_hosts }}"

  when: __mysql_check.stdout | trim != "1" and _mysql_reinstalled


- fail:
    msg: "Cannot connect to MySQL. Probably the client credentials are wrong in ~{{ mysql_root_username }}/.my.cnf"
  when: __mysql_check.stdout | trim != "1" and not _mysql_reinstalled

# Has to be after the root password assignment, for idempotency
- name: Create file with root password credentials
  template:
    src: "client.cnf.j2"
    dest: "~{{ mysql_root_username }}/.my.cnf"
    owner: "{{ mysql_root_username }}"
    group: "{{ mysql_root_username }}"
    mode: 0600

- name: Get list of hosts for the anonymous user
  command: mysql -NBe 'SELECT Host FROM mysql.user WHERE User = ""'
  register: mysql_anonymous_hosts
  changed_when: False

- name: Remove anonymous MySQL users
  mysql_user:
    name: ''
    host: "{{ item }}"
    state: absent
  with_items: "{{ mysql_anonymous_hosts.stdout_lines }}"
  when: mysql_anonymous_hosts.stdout_lines

- name: Remove MySQL test database
  mysql_db:
    name: "test"
    state: absent


