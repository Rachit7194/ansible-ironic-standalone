---
# Debian repository
- block:
  - name: Debian - Import repository key
    apt_key: url="{{ dnsmasq_os_repo_key }}" state=present
    when: >
      not dnsmasq_os_repo_key is none
      and dnsmasq_os_repo_key | search("http://.*")
    ignore_errors: yes

  - name: Debian - Add repository package
    apt: name="{{ dnsmasq_os_repo_key }}" state=latest
    when: >
      not dnsmasq_os_repo_key is none and
      not dnsmasq_os_repo_key | search("http://.*")

  - name: Debian - Add repository url
    apt_repository: repo="{{ dnsmasq_os_repo_url }}" state=present

  when: >
    ansible_os_family == 'Debian' 
    and not dnsmasq_os_packages
  tags: ["debian", "repository"]


# RedHat repository
- block:
  - name: RedHat - Add repository
    yum: name="{{ dnsmasq_os_repo_url }}" state=present

  - name: RedHat - Import repository key
    rpm_key: key="{{ dnsmasq_os_repo_key }}" state=present
    when: dnsmasq_os_repo_key is not none
    
  when: >
    ansible_os_family == 'RedHat'
    and not dnsmasq_os_packages
  tags: ["redhat", "repository"]


- name: RedHat - Install required packages
  yum:
    name: "{{ item.key }}{{ '-' + item.version | default('*') }}"
    state: "{{ item.state | default('present') }}"
  with_dict: "{{ dnsmasq_packages }}"
  when: ansible_os_family == 'RedHat'
  register: __dnsmasq_installed
  tags: ["redhat", "packages"]

- name: Debian - Install required packages
  apt: 
    name: "{{ item.key }}{{ '=' + item.version | default('*') }}"
    state: "{{ item.state | default('present') }}"
    install_recommends: "{{ dnsmasq_packages_install_recommends }}"
  with_dict: "{{ dnsmasq_packages }}"
  when: ansible_os_family == 'Debian'
  register: __dnsmasq_installed
  tags: ["debian", "packages"]

- name: Check if packages were installed
  set_fact: _dnsmasq_reinstalled="{{ __dnsmasq_installed.changed }}"

- name: Ensure dnsmasq is stopped after initial install
  service: name="{{ dnsmasq_daemon }}" state=stopped enabled=no
  ignore_errors: yes
  when: _dnsmasq_reinstalled


# Delete the rest of init system scripts
- block:
  - name: Debian - Delete upstart configuration
    file: path="/etc/init/{{ dnsmasq_daemon }}.conf" state=absent
    when: dnsmasq_init_system != "upstart"
    notify: stop dnsmasq

  - name: Debian - Delete init.d configuration
    file: path="/etc/init.d/{{ dnsmasq_daemon }}" state=absent
    when: dnsmasq_init_system != "initd"
    notify: stop dnsmasq

  - name: Debian - Delete systemd configuration
    file: path="/lib/systemd/system/{{ dnsmasq_daemon }}.service" state=absent
    when: dnsmasq_init_system != "systemd"
    notify: stop dnsmasq

  when: ansible_os_family == 'Debian'
  ignore_errors: yes
  tags: ["debian", "ubuntu", "init"]


# Flush all notify stop handlers, to be sure that they are done!
# The reason is because of upstart service
- meta: flush_handlers

