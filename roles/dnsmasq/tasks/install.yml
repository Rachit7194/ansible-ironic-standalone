---
# Debian repository
- block:
  - name: Debian - Import repository key
    apt_key:
      url: "{{ dnsmasq_os_repo_key }}"
      state: present
    when: dnsmasq_os_repo_key and dnsmasq_os_repo_key | search("http://.*")
    ignore_errors: yes

  - name: Debian - Add repository package
    apt:
      name: "{{ dnsmasq_os_repo_key }}"
      state: latest
    when: dnsmasq_os_repo_key not dnsmasq_os_repo_key | search("http://.*")

  - name: Debian - Add repository url
    apt_repository:
      repo: "{{ dnsmasq_os_repo_url }}"
      state: present

  when: ansible_os_family == 'Debian' and not dnsmasq_os_packages
  tags: ["debian", "repository"]


# RedHat repository
- block:
  - name: RedHat - Add repository url
    yum:
      name: "{{ dnsmasq_os_repo_url }}"
      state: present

  - name: RedHat - Import repository key
    rpm_key:
      key: "{{ dnsmasq_os_repo_key }}"
      state: present
    when: dnsmasq_os_repo_key is not none

  when: ansible_os_family == 'RedHat' and not dnsmasq_os_packages
  tags: ["redhat", "repository"]


- name: RedHat - Install required packages
  yum:
    name: "{{ item.key if ('version' not in item.value) else ('%s-%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    update_cache: "{{ dnsmasq_packages_update_cache | ternary('yes', 'no') }}"
  with_dict: "{{ dnsmasq_packages }}"
  when: ansible_os_family == 'RedHat'
  register: __dnsmasq_installed_rh
  tags: ["redhat", "packages"]

- name: Debian - Install required packages
  apt: 
    name: "{{ item.key if ('version' not in item.value) else ('%s=%s' % (item.key, item.value['version'])) }}"
    state: "{{ item.value.state | default('present') }}"
    install_recommends: "{{ dnsmasq_packages_install_recommends }}"
    update_cache: "{{ dnsmasq_packages_update_cache | ternary('yes', 'no') }}"
    cache_valid_time: "{{ dnsmasq_packages_update_cache }}"
  with_dict: "{{ dnsmasq_packages }}"
  when: ansible_os_family == 'Debian'
  register: __dnsmasq_installed_debian
  tags: ["debian", "packages"]

- name: Check if packages were installed
  set_fact:
    _dnsmasq_reinstalled: "{{ __dnsmasq_installed_rh.changed or __dnsmasq_installed_debian.changed }}"

- name: Ensure dnsmasq is stopped after initial install
  service:
    name: "{{ dnsmasq_daemon }}"
    state: stopped
    enabled: no
  ignore_errors: yes
  when: _dnsmasq_reinstalled


- block:
  - name: Create custom systemd folder configuration
    file:
      path: "/etc/systemd/system/{{ dnsmasq_daemon }}.service.d"
      state: directory
      mode: 0755

  - name: Define custom systemd properties
    template:
      src: systemd.conf.j2
      dest: "/etc/systemd/system/{{ dnsmasq_daemon }}.service.d/service.conf"
      mode: 0644
    register: __dnsmasq_systemd

  - name: Reload systemd
    command: systemctl daemon-reload
    when: __dnsmasq_systemd|changed

  tags: ["systemd", "init"]


- name: Get the Dnsmasq version
  shell: dnsmasq -v | sed -n 's/.*version[[:space:]]\+\([0-9.]\+\)[[:space:]]\+Copyright.*/\1/Ip'
  register: __dnsmasq_version
  changed_when: False

- name: Set Dnsmasq version
  set_fact:
    _dnsmasq_version: "{{ __dnsmasq_version.stdout }}"

