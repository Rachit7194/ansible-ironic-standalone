---
# Debian repository
- block:
  - name: Debian - Import repository key
    apt_key: url="{{ rabbitmq_os_repo_key }}" state=present
    when: >
      not rabbitmq_os_repo_key is none and
      rabbitmq_os_repo_key | search("http://.*")
    ignore_errors: yes

  - name: Debian - Add repository package
    apt: name="{{ rabbitmq_os_repo_key }}" state=latest
    when: >
      not rabbitmq_os_repo_key is none and
      not rabbitmq_os_repo_key | search("http://.*")

  - name: Debian - Add repository url
    apt_repository: repo="{{ rabbitmq_os_repo_url }}" state=present

  when: >
    ansible_os_family == 'Debian' 
    and not rabbitmq_os_packages
  tags: ["debian", "repository"]


# RedHat repository
- block:
  - name: RedHat - Add repository
    yum: name="{{ rabbitmq_os_repo_url }}" state=present

  - name: RedHat - Import repository key
    rpm_key: key="{{ rabbitmq_os_repo_key }}" state=present
    when: rabbitmq_os_repo_key is not none

  when: >
    ansible_os_family == 'RedHat' and 
    not rabbitmq_os_packages
  tags: ["redhat", "repository"]


- name: Check if configuration exists
  stat: path="{{ rabbitmq_config }}"
  register: __rabbitmq_conf

- name: Setup configuration fact
  set_fact: _rabbitmq_previous="{{ __rabbitmq_conf.stat.exists }}"

- name: RedHat - Install required packages
  yum:
    name: "{{ item.key }}{{ '-' + item.version | default('*') }}"
    state: "{{ item.state | default('present') }}"
  with_dict: "{{ rabbitmq_packages }}"
  when: ansible_os_family == 'RedHat'
  register: __rabbitmq_installed
  tags: ["redhat", "packages"]

- name: Debian - Install required packages
  apt: 
    name: "{{ item.key }}{{ '=' + item.version | default('*') }}"
    state: "{{ item.state | default('present') }}"
    install_recommends: "{{ rabbitmq_packages_install_recommends }}"
  with_dict: "{{ rabbitmq_packages }}"
  when: ansible_os_family == 'Debian'
  register: __rabbitmq_installed
  tags: ["debian", "packages"]

- name: Check if packages were installed
  set_fact: _rabbitmq_reinstalled="{{ __rabbitmq_installed.changed }}"

# Because Ubuntu starts RabbitMQ as part of the install process, we need to stop it
- name: Ensure RabbitMQ is stopped after initial install
  service: name="{{ rabbitmq_daemon }}" state=stopped enabled=no
  when: _rabbitmq_reinstalled
  ignore_errors: yes


# Delete the rest of init system scripts
- block:
  - name: Debian - Delete upstart configuration
    file: path="/etc/init/{{ rabbitmq_daemon }}.conf" state=absent
    when: rabbitmq_init_system != "upstart"
    notify: stop rabbitmq

  - name: Debian - Delete init.d configuration
    file: path="/etc/init.d/{{ rabbitmq_daemon }}" state=absent
    when: rabbitmq_init_system != "initd"
    notify: stop rabbitmq

  - name: Debian - Delete systemd configuration
    file: path="/lib/systemd/system/{{ rabbitmq_daemon }}.service" state=absent
    when: rabbitmq_init_system != "systemd"
    notify: stop rabbitmq

  when: ansible_os_family == 'Debian'
  ignore_errors: yes
  tags: ["debian", "ubuntu", "init"]


# Flush all notify stop handlers, to be sure that they are done!
# The reason is because of upstart service
- meta: flush_handlers

