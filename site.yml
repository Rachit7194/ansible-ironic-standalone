---
# Please check the dnsmasq_conf_dhcp variable interface!

- hosts: all
  become: yes
  # Normally these vars are defined in the inventory file or in group_vars
  vars:
    baremetal_server_database_rootpass: root
    baremetal_server_database_name: ironic
    baremetal_server_database_user: ironic
    baremetal_server_database_pass: mysql
    baremetal_server_inspector_database_name: inspector
    baremetal_server_inspector_database_user: inspector
    baremetal_server_inspector_database_pass: mysql
    baremetal_server_msg_vhost: ironic
    baremetal_server_msg_user: ironic
    baremetal_server_msg_pass: rabbitmq
    baremetal_server_dhcp_params: ["10.0.0.100", "10.0.0.200", "infinite"]
    baremetal_server_dhcp_domain: pxe.local
    baremetal_server_http_root_path: /var/lib/ironic/http
    baremetal_server_images_path: /var/lib/ironic/http/images
    baremetal_server_metadata_path: /var/lib/ironic/http/metadata
    baremetal_server_images_deploy_path: /var/lib/ironic/http/deploy
    baremetal_server_inspector_enabled: True
    baremetal_server_inspector_default_pxe: True

  roles:
    - role: mysql
      mysql_root_password: "{{ baremetal_server_database_rootpass }}"
      mysql_database_list:
        - name: "{{ baremetal_server_database_name }}"
        - name: "{{ baremetal_server_inspector_database_name }}"
      mysql_user_list:
        - name: "{{ baremetal_server_database_user }}"
          password: "{{ baremetal_server_database_pass }}"
          priv: "{{ baremetal_server_database_name }}.*:ALL"
          host: "%"
        - name: "{{ baremetal_server_inspector_database_user }}"
          password: "{{ baremetal_server_inspector_database_pass }}"
          priv: "{{ baremetal_server_inspector_database_name }}.*:ALL"
          host: "%"

    - role: rabbitmq
      rabbitmq_vhost_definition_list:
        - name: "{{ baremetal_server_msg_vhost }}"
      rabbitmq_users_definition_list:
        - user: "{{ baremetal_server_msg_user }}"
          password: "{{ baremetal_server_msg_pass }}"
          vhost: "{{ baremetal_server_msg_vhost }}"
          tags: [ "administrator", "management" ]

    - role: ironic
      ironic_debug: true
      ironic_my_ip: "{{ ansible_default_ipv4.address }}"
      ironic_conductor_api_url: "http://10.0.0.10:6385/"
      ironic_pxe_tftp_server: "10.0.0.10"
      ironic_oslo_messaging_rabbit_host: "localhost"
      ironic_oslo_messaging_rabbit_userid: "{{ baremetal_server_msg_user }}"
      ironic_oslo_messaging_rabbit_password: "{{ baremetal_server_msg_pass }}"
      ironic_oslo_messaging_rabbit_virtual_host: "{{ baremetal_server_msg_vhost }}"
      ironic_database_mysql_host: "localhost"
      ironic_database_mysql_userid: "{{ baremetal_server_database_user }}"
      ironic_database_mysql_password: "{{ baremetal_server_database_pass }}"
      ironic_database_mysql_db: "{{ baremetal_server_database_name }}"
      ironic_pxe_images_path: "{{ baremetal_server_images_path }}"
      # To configure web console with shellinabox
      ironic_pxe_append_params: ["nofb", "nomodeset", "vga=normal", "coreos.autologin", "console=tty0", "console=ttyS0,115200n8"]
      ironic_deploy_http_url: "http://10.0.0.10/deploy"
      ironic_deploy_http_root: "{{ baremetal_server_images_deploy_path }}"
      ironic_deploy_erase_devices_priority: 0
      ironic_enabled_drivers: ["pxe_ipmitool", "agent_ipmitool", "agent_vbox"]
      # Inspeccion enabled (add also the role)
      ironic_inspector_enabled: "{{ baremetal_server_inspector_enabled }}"
      ironic_inspector_service_url: "http://10.0.0.10:5050"
      # For ironic webclient
      ironic_cors_domains:
        ironic_webclient:
          allowed_origin: "http://localhost:8080"
          allow_credentials: True

    - role: inspector
      ironic_inspector_debug: False
      ironic_inspector_enabled: "{{ baremetal_server_inspector_enabled }}"
      # Enable default PXE for automatic enroll of discovery nodes in Ironic
      ironic_inspector_discovery_enroll: "{{ baremetal_server_inspector_default_pxe }}"
      ironic_inspector_ipa_download: False
      ironic_inspector_api_url: "http://10.0.0.10:5050/v1/"
      ironic_inspector_ironic_api_url: "http://10.0.0.10:6385/"
      ironic_inspector_database_mysql_host: "localhost"
      ironic_inspector_database_mysql_userid: "{{ baremetal_server_inspector_database_user }}"
      ironic_inspector_database_mysql_password: "{{ baremetal_server_inspector_database_pass }}"
      ironic_inspector_database_mysql_db: "{{ baremetal_server_inspector_database_name }}"
      ironic_inspector_ipa_deploy_path: "{{ baremetal_server_images_deploy_path }}"
      ironic_inspector_ipa_tftproot: "{{ ironic_pxe_tftp_root }}"
      ironic_inspector_ipa_images_path: "{{ ironic_pxe_images_path }}"
      ironic_inspector_ipa_pxe_append_params: ["nofb", "nomodeset", "vga=normal", "coreos.autologin", "console=tty0", "console=ttyS0,115200n8"]

    - role: dnsmasq
      dnsmasq_conf_domain: "{{ baremetal_server_dhcp_domain }}"
      dnsmasq_conf_dhcp:
        # enp0s8 for Centos 7, eth1 for Ubuntu
        - device: "eth1"
          range: "{{ baremetal_server_dhcp_params }}"
          ignore_names: True
          generate_names: True
          option:
            - "option:router,{{ ansible_default_ipv4.gateway }}"
            - "option:dns-server,{{ ansible_default_ipv4.address }}"
          boot:
            - "{{ ironic_pxe_bootfile_name }}"
          tftp: "{{ ironic_pxe_tftp_root }}"

    - role: nginx
      nginx_lua: True
      nginx_server_list:
        - name: "{{ ansible_hostname }}"
          root: "{{ baremetal_server_http_root_path }}"
          client_body_temp_path: "{{ baremetal_server_http_root_path }}/tmp"
          access_log: "/var/log/nginx/{{ ansible_hostname }}-server_access.log"
          lua_files: 
            - "files/bosh_webdav_lua_registry/webdav-registry.lua"
            - "files/bosh_webdav_lua_registry/JSON.lua"
          location_list:
            - name: "/"
              autoindex: "on"
            - name: "/images/"
              autoindex: "on"
              client_body_buffer_size: "16k" 
              client_max_body_size: "50G"
              create_full_put_path: "on"
              dav_access: "user:rw group:rw all:r"
              dav_methods: "PUT DELETE MKCOL COPY MOVE"
              default_type: "application/octet-stream"
            - name: "/metadata/"
              autoindex: "on"
              client_body_buffer_size: "16k" 
              client_max_body_size: "100M"
              create_full_put_path: "on"
              dav_access: "user:rw group:rw all:r"
              dav_methods: "PUT DELETE MKCOL COPY MOVE"
              default_type: "application/octet-stream"
            - name: "/deploy/"
              autoindex: "on"
              client_body_buffer_size: "16k" 
              client_max_body_size: "100M"
              create_full_put_path: "on"
              dav_access: "user:rw group:rw all:r"
              dav_methods: "PUT DELETE MKCOL COPY MOVE"
              default_type: "application/octet-stream"
              satisfy: "any"
              allow:
                - "127.0.0.0/24"
                - "{{ ansible_default_ipv4.address }}"
              auth:
                title: "Restricted Metadata"
                users:
                  jose: "{PLAIN}hola"
            - name: "/registry/"
              autoindex: "off"
              default_type: "application/json"
              client_max_body_size: "10M"
              content_by_lua_file: "webdav-registry.lua"
              auth:
                title: "BOSH Registry Auth"
                users:
                  jose: "{PLAIN}hola"


    - role: webclient
      webclient_webdir_owner: "{{ nginx_user }}"
      webclient_webdir_group: "{{ ironic_group }}"

    - role: monit
      monit_monitoring_list:
        - name: mysql
          target: "{{ mysql_pidfile }}"
          script: "/usr/sbin/service {{ mysql_daemon }} %"
        - name: rabbitmq
          target: "{{ rabbitmq_pidfile }}"
          script: "/usr/sbin/service {{ rabbitmq_daemon }} %"
        - name: ironic-api
          target: "{{ ironic_api_pidfile }}"
          script: "/usr/sbin/service {{ ironic_api_service_name }} %"
        - name: ironic-conductor
          target: "{{ ironic_conductor_pidfile }}"
          script: "/usr/sbin/service {{ ironic_conductor_service_name }} %"
        - name: ironic-inspector
          target: "{{ ironic_inspector_pidfile }}"
          script: "/usr/sbin/service {{ ironic_inspector_service_name }} %"
        - name: dnsmasq
          target: "{{ dnsmasq_pidfile }}"
          script: "/usr/sbin/service {{ dnsmasq_daemon }} %"
        - name: nginx
          target: "{{ nginx_pidfile }}"
          script: "/usr/sbin/service {{ nginx_daemon }} %"

#  tasks:
#
#   - name: Display all variables/facts known for a host
#     debug: var=hostvars[inventory_hostname]
